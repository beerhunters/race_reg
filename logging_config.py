"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ beermile_reg.
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ config.json.
"""

import json
import logging.handlers
import os
import sys
import asyncio
from typing import Dict, Any, Optional
import traceback
import threading


class ColorCodes:
    """ANSI —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."""
    RESET = '\033[0m'
    BOLD = '\033[1m'
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    
    # –Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
    BRIGHT_RED = '\033[91m'
    BRIGHT_GREEN = '\033[92m'
    BRIGHT_YELLOW = '\033[93m'
    BRIGHT_BLUE = '\033[94m'
    BRIGHT_MAGENTA = '\033[95m'
    BRIGHT_CYAN = '\033[96m'


class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å —ç–º–æ–¥–∑–∏."""
    
    # –≠–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LEVEL_CONFIGS = {
        'DEBUG': {
            'emoji': 'üîç',
            'color': ColorCodes.CYAN,
            'name_color': ColorCodes.BRIGHT_CYAN
        },
        'INFO': {
            'emoji': 'üí°',
            'color': ColorCodes.GREEN,
            'name_color': ColorCodes.BRIGHT_GREEN
        },
        'WARNING': {
            'emoji': '‚ö†Ô∏è',
            'color': ColorCodes.YELLOW,
            'name_color': ColorCodes.BRIGHT_YELLOW
        },
        'ERROR': {
            'emoji': '‚ùå',
            'color': ColorCodes.RED,
            'name_color': ColorCodes.BRIGHT_RED
        },
        'CRITICAL': {
            'emoji': 'üö®',
            'color': ColorCodes.BRIGHT_RED + ColorCodes.BOLD,
            'name_color': ColorCodes.BRIGHT_RED + ColorCodes.BOLD
        }
    }
    
    def __init__(self):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª —Ü–≤–µ—Ç–∞
        self.use_colors = self._supports_color()
        
        # –ë–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        if self.use_colors:
            format_str = (
                f"{ColorCodes.BRIGHT_BLUE}%(asctime)s{ColorCodes.RESET} "
                f"%(level_emoji)s %(colored_levelname)s "
                f"{ColorCodes.BRIGHT_MAGENTA}%(name)s{ColorCodes.RESET} "
                f"%(colored_message)s"
            )
        else:
            format_str = "%(asctime)s %(level_emoji)s %(levelname)s %(name)s %(message)s"
            
        super().__init__(format_str, datefmt='%H:%M:%S')
    
    def _supports_color(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª —Ü–≤–µ—Ç–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if os.getenv('NO_COLOR') or os.getenv('ANSI_COLORS_DISABLED'):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ stdout —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º
        if not hasattr(sys.stdout, 'isatty') or not sys.stdout.isatty():
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TERM –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        term = os.getenv('TERM', '').lower()
        return 'color' in term or 'xterm' in term or term in ['screen', 'tmux']
    
    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏."""
        level_config = self.LEVEL_CONFIGS.get(record.levelname, self.LEVEL_CONFIGS['INFO'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —É—Ä–æ–≤–Ω—è
        record.level_emoji = level_config['emoji']
        
        if self.use_colors:
            # –¶–≤–µ—Ç–Ω–æ–µ –∏–º—è —É—Ä–æ–≤–Ω—è
            record.colored_levelname = (
                f"{level_config['name_color']}{record.levelname:8}{ColorCodes.RESET}"
            )
            
            # –¶–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_color = level_config['color']
            record.colored_message = f"{message_color}{record.getMessage()}{ColorCodes.RESET}"
        else:
            record.colored_levelname = f"{record.levelname:8}"
            record.colored_message = record.getMessage()
        
        return super().format(record)


class PlainFormatter(logging.Formatter):
    """–ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å —ç–º–æ–¥–∑–∏ –Ω–æ –±–µ–∑ —Ü–≤–µ—Ç–æ–≤."""
    
    LEVEL_EMOJIS = {
        'DEBUG': 'üîç',
        'INFO': 'üí°', 
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'CRITICAL': 'üö®'
    }
    
    def __init__(self):
        format_str = "%(asctime)s %(level_emoji)s %(levelname)-8s %(name)s %(message)s"
        super().__init__(format_str, datefmt='%Y-%m-%d %H:%M:%S')
    
    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–∞–π–ª–∞."""
        record.level_emoji = self.LEVEL_EMOJIS.get(record.levelname, 'üí°')
        return super().format(record)


class CustomRotatingFileHandler(logging.handlers.BaseRotatingHandler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ä–æ—Ç–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, filename, maxBytes, encoding=None):
        super().__init__(filename, mode="a", encoding=encoding)
        self.maxBytes = maxBytes
        self.backup_file = f"{filename}.1"

    def shouldRollover(self, record):
        if (
            os.path.exists(self.baseFilename)
            and os.path.getsize(self.baseFilename) > self.maxBytes
        ):
            return True
        return False

    def doRollover(self):
        if self.stream:
            self.stream.close()
            self.stream = None
        if os.path.exists(self.baseFilename):
            if os.path.exists(self.backup_file):
                os.remove(self.backup_file)
            os.rename(self.baseFilename, self.backup_file)
        self.stream = self._open()


class TelegramHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ERROR –∏ CRITICAL –ª–æ–≥–æ–≤ –≤ Telegram –≥—Ä—É–ø–ø—É."""
    
    def __init__(self, bot_instance=None, chat_id: Optional[str] = None):
        super().__init__()
        self.bot = bot_instance
        self.chat_id = chat_id or os.getenv('FOR_LOGS')
        self.setLevel(logging.ERROR)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ERROR –∏ CRITICAL
        self._message_queue = []
        self._queue_lock = threading.Lock()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self._sender_task = None
        
        # –°—á–µ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._error_counts = {}
        self._total_errors = 0
        
        # –ê–Ω—Ç–∏-—Å–ø–∞–º –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        self._network_error_timestamps = {}
        self._network_error_threshold = 60  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ —á–∞—â–µ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
    
    def set_bot(self, bot_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        self.bot = bot_instance
        if bot_instance and self._sender_task is None:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
            try:
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    self._sender_task = asyncio.create_task(self._message_sender())
                else:
                    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∫–æ–≥–¥–∞ —Ü–∏–∫–ª —Å—Ç–∞–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º
                    def start_sender():
                        if self.bot and self._sender_task is None:
                            self._sender_task = asyncio.create_task(self._message_sender())
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ call_soon_threadsafe –∫–æ–≥–¥–∞ —Ü–∏–∫–ª –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
                    try:
                        loop.call_soon_threadsafe(start_sender)
                    except RuntimeError:
                        pass
            except RuntimeError:
                # –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω, –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                pass
    
    def emit(self, record):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
        if not self.chat_id or not self.bot:
            return
            
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ Telegram API
            if self._should_skip_telegram_error(record):
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
            self._total_errors += 1
            error_key = f"{record.name}:{record.levelname}"
            self._error_counts[error_key] = self._error_counts.get(error_key, 0) + 1
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.format_telegram_message(record)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
            with self._queue_lock:
                self._message_queue.append(message)
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
            self._ensure_sender_task_running()
                    
        except Exception:
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
            pass
    
    def _should_skip_telegram_error(self, record) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ Telegram."""
        import time
        
        message_lower = record.getMessage().lower()
        
        # –°–ø–∏—Å–æ–∫ —Ç–∏–ø–∏—á–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ Telegram, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        telegram_network_errors = [
            'failed to fetch updates',
            'request timeout error',
            'bad gateway',
            'internal server error',
            'service unavailable',
            'telegram server says - bad gateway',
            'telegram server says - internal server error', 
            'telegram server says - service unavailable',
            'telegram server says - gateway timeout',
            'telegram server says - request timeout',
            'telegramnetworkerror',
            'telegramservererror',
            'connection timeout',
            'read timeout',
            'connect timeout',
            'network is unreachable',
            'connection reset by peer',
            'ssl handshake failed'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º aiogram dispatcher –æ—à–∏–±–∫–∏
        if 'aiogram.dispatcher' in record.name or 'aiogram.client' in record.name:
            matched_error = None
            for error in telegram_network_errors:
                if error in message_lower:
                    matched_error = error
                    break
            
            if matched_error:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏-—Å–ø–∞–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
                current_time = time.time()
                last_time = self._network_error_timestamps.get(matched_error, 0)
                
                if current_time - last_time < self._network_error_threshold:
                    # –û—à–∏–±–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    return True
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    self._network_error_timestamps[matched_error] = current_time
                    return False  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            
        return False
    
    def format_telegram_message(self, record) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram."""
        from datetime import datetime
        import pytz
        
        level_emoji = {
            'ERROR': '‚ùå',
            'CRITICAL': 'üî•'
        }.get(record.levelname, '‚ö†Ô∏è')
        
        # –í—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        moscow_tz = pytz.timezone("Europe/Moscow")
        error_time = datetime.fromtimestamp(record.created, moscow_tz)
        
        message = f"{level_emoji} <b>{record.levelname} –û–®–ò–ë–ö–ê</b>\n\n"
        message += f"üïê <b>–í—Ä–µ–º—è:</b> {error_time.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö\n"
        message += f"üìÇ <b>–ú–æ–¥—É–ª—å:</b> <code>{record.name}</code>\n"
        message += f"üìÅ <b>–§—É–Ω–∫—Ü–∏—è:</b> <code>{record.funcName}:{record.lineno}</code>\n"
        message += f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {record.getMessage()}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info and record.exc_info[1]:
            exc_type = record.exc_info[0].__name__
            exc_value = str(record.exc_info[1])
            message += f"‚ö° <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> <code>{exc_type}</code>\n"
            if exc_value and exc_value != record.getMessage():
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–Ω–∞—á–µ–Ω–∏—è –æ—à–∏–±–∫–∏
                if len(exc_value) > 200:
                    exc_value = exc_value[:200] + "... (truncated)"
                message += f"üí¨ <b>–î–µ—Ç–∞–ª–∏:</b> <code>{exc_value}</code>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ aiogram, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if 'aiogram' in record.name and 'update id=' in record.getMessage():
            import re
            update_match = re.search(r'update id=(\d+)', record.getMessage())
            bot_match = re.search(r'bot id=(\d+)', record.getMessage())
            if update_match:
                message += f"ü§ñ <b>Update ID:</b> <code>{update_match.group(1)}</code>\n"
            if bot_match:
                message += f"üì° <b>Bot ID:</b> <code>{bot_match.group(1)}</code>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        message += f"üñ• <b>–û–∫—Ä—É–∂–µ–Ω–∏–µ:</b> {'üê≥ Docker' if os.path.exists('/app') else 'üíª Local'}\n"
        message += f"üìä <b>–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:</b> {self._total_errors}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–æ–∫
        error_key = f"{record.name}:{record.levelname}"
        error_count = self._error_counts.get(error_key, 1)
        if error_count > 1:
            message += f"üîÑ <b>–≠—Ç–æ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏:</b> {error_count} —Ä–∞–∑\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
        error_message_lower = record.getMessage().lower()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ Telegram
        telegram_network_errors = ['failed to fetch updates', 'request timeout', 'bad gateway', 'internal server error']
        is_network_error = any(err in error_message_lower for err in telegram_network_errors)
        
        if is_network_error and ('aiogram.dispatcher' in record.name or 'aiogram.client' in record.name):
            message += f"üåê <b>–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Telegram API</b>\n"
            message += f"‚è∞ <b>–ê–Ω—Ç–∏-—Å–ø–∞–º:</b> –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è {self._network_error_threshold} —Å–µ–∫\n"
            message += f"üí° <b>–°–æ–≤–µ—Ç:</b> –û–±—ã—á–Ω–æ –∏—Å—á–µ–∑–∞–µ—Ç —Å–∞–º–∞ - –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ Telegram\n"
        elif 'zerodivisionerror' in error_message_lower:
            message += f"üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å\n"
        elif 'keyerror' in error_message_lower:
            message += f"üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ\n"
        elif 'attributeerror' in error_message_lower:
            message += f"üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –æ–±—ä–µ–∫—Ç–∞\n"
        elif 'connection' in error_message_lower or 'database' in error_message_lower:
            message += f"üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
        elif 'telegram' in error_message_lower and ('bad request' in error_message_lower or 'forbidden' in error_message_lower):
            message += f"üí° <b>–°–æ–≤–µ—Ç:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–π—Å–±–µ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            exc_text = ''.join(traceback.format_exception(*record.exc_info))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–µ–π—Å–±–µ–∫–∞
            lines = exc_text.split('\n')
            relevant_lines = []
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–æ–¥–∞ (–Ω–µ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫)
            for line in lines:
                if any(keyword in line.lower() for keyword in ['/app/', 'handlers/', 'database.py', 'main.py']):
                    relevant_lines.append(line)
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            if relevant_lines:
                relevant_trace = '\n'.join(relevant_lines[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 —Å—Ç—Ä–æ–∫
                if len(relevant_trace) > 500:
                    relevant_trace = relevant_trace[:500] + "\n... (truncated)"
                message += f"\nüìç <b>–ù–∞—à –∫–æ–¥:</b>\n<code>{relevant_trace}</code>\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–±–µ–∫–∞
            if len(exc_text) > 800:
                exc_text = exc_text[:800] + "\n... (truncated)"
            message += f"\nüîç <b>–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫:</b>\n<code>{exc_text}</code>"
        
        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
        if len(message) > 4000:
            message = message[:4000] + "\n... (message truncated)"
            
        return message
    
    def _ensure_sender_task_running(self):
        """–£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞."""
        if not self.bot or self._sender_task is not None:
            return
            
        try:
            loop = asyncio.get_event_loop()
            if loop.is_running():
                self._sender_task = asyncio.create_task(self._message_sender())
        except RuntimeError:
            # –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ
            pass
    
    async def _message_sender(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram."""
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
                messages_to_send = []
                with self._queue_lock:
                    if self._message_queue:
                        messages_to_send = self._message_queue.copy()
                        self._message_queue.clear()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                for message in messages_to_send:
                    try:
                        await self.bot.send_message(
                            chat_id=self.chat_id,
                            text=message,
                            parse_mode='HTML',
                            disable_notification=True
                        )
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await asyncio.sleep(0.5)
                    except Exception:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        pass
                
                # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(5)
                
            except asyncio.CancelledError:
                break
            except Exception:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                await asyncio.sleep(10)
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        if self._sender_task and not self._sender_task.done():
            self._sender_task.cancel()
        super().close()


class LoggingConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    LOG_LEVELS = {
        "DEBUG": logging.DEBUG,
        "INFO": logging.INFO,
        "WARNING": logging.WARNING,
        "ERROR": logging.ERROR,
        "CRITICAL": logging.CRITICAL,
    }
    
    def __init__(self, config_path: str = "config.json"):
        self.config_path = config_path
        self.config = self._load_config()
        self.telegram_handler = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        self._setup_logging()
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json."""
        try:
            with open(self.config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
            return config
        except FileNotFoundError:
            print(f"–§–∞–π–ª {self.config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {"log_level": "INFO"}
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ {self.config_path}: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return {"log_level": "INFO"}
    
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ (–¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ - /app/logs, –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - ./logs)
        log_dir = "/app/logs" if os.path.exists("/app") else "./logs"
        os.makedirs(log_dir, exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        log_level_str = self.config.get("log_level", "INFO")
        
        if log_level_str not in self.LOG_LEVELS:
            print(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ log_level: {log_level_str}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è INFO.")
            log_level = logging.INFO
        else:
            log_level = self.LOG_LEVELS[log_level_str]
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
        console_formatter = ColoredFormatter()
        file_formatter = PlainFormatter()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(console_formatter)
        
        log_file = os.path.join(log_dir, "bot.log")
        file_handler = CustomRotatingFileHandler(
            log_file, 
            maxBytes=10 * 1024 * 1024
        )
        file_handler.setFormatter(file_formatter)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
        root_logger = logging.getLogger()
        root_logger.setLevel(log_level)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in root_logger.handlers[:]:
            root_logger.removeHandler(handler)
        
        # –°–æ–∑–¥–∞–µ–º Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.telegram_handler = TelegramHandler()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        root_logger.addHandler(console_handler)
        root_logger.addHandler(file_handler)
        root_logger.addHandler(self.telegram_handler)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        logger = logging.getLogger(__name__)
        logger.info(f"–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£—Ä–æ–≤–µ–Ω—å: {log_level_str}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FOR_LOGS –≥—Ä—É–ø–ø—ã
        if self.telegram_handler.chat_id:
            logger.info(f"Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã: {self.telegram_handler.chat_id}")
        else:
            logger.warning("FOR_LOGS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Telegram")
    
    def get_logger(self, name: str = None) -> logging.Logger:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º."""
        return logging.getLogger(name)
    
    def get_log_level(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        return self.config.get("log_level", "INFO")
    
    def set_bot_instance(self, bot_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –¥–ª—è Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        if self.telegram_handler:
            self.telegram_handler.set_bot(bot_instance)
            logger = logging.getLogger(__name__)
            logger.info("ü§ñ Bot instance –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
_logging_config = LoggingConfig()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ (—É–¥–æ–±–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)
def get_logger(name: str = None) -> logging.Logger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è."""
    return _logging_config.get_logger(name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
def setup_telegram_logging(bot_instance):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∫ Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –ª–æ–≥–æ–≤."""
    _logging_config.set_bot_instance(bot_instance)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
log_level = LoggingConfig.LOG_LEVELS


class LogHelper:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""

    def __init__(self, logger_name: str = None):
        self.logger = get_logger(logger_name)

    def command_received(self, command: str, user_id: int, username: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
        user_info = f"@{username}" if username else f"ID:{user_id}"
        self.logger.info(f"üéØ Command '{command}' received from user {user_info}")

    def admin_action(self, action: str, admin_id: int, details: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        msg = f"üëë Admin action: {action} (admin_id={admin_id})"
        if details:
            msg += f" - {details}"
        self.logger.info(msg)

    def database_operation(
        self,
        operation: str,
        table: str,
        user_id: int = None,
        success: bool = True,
        details: str = None,
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
        msg = f"üóÉÔ∏è  DB {operation} on {table}: {status}"
        if user_id:
            msg += f" (user_id={user_id})"
        if details:
            msg += f" - {details}"

        if success:
            self.logger.info(msg)
        else:
            self.logger.error(msg)

    def user_registration(
        self, user_id: int, username: str, name: str, role: str, success: bool = True
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        user_info = f"{name} (@{username}, ID:{user_id})"
        if success:
            self.logger.info(f"üéâ User registration SUCCESS: {user_info} as {role}")
        else:
            self.logger.error(f"üíî User registration FAILED: {user_info} as {role}")

    def notification_sent(
        self, notification_type: str, user_id: int, success: bool = True, error: str = None
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        if success:
            self.logger.info(f"üì§ Notification sent: {notification_type} to user_id={user_id}")
        else:
            self.logger.error(
                f"üìµ Notification failed: {notification_type} to user_id={user_id} - {error}"
            )

    def system_event(self, event: str, details: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        msg = f"üöÄ System event: {event}"
        if details:
            msg += f" - {details}"
        self.logger.info(msg)

    def validation_error(self, field: str, value: str, error: str, user_id: int = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        msg = f"üîç Validation error for {field}='{value}': {error}"
        if user_id:
            msg += f" (user_id={user_id})"
        self.logger.warning(msg)

    def handler_registration(self, handler_name: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        self.logger.info(f"‚öôÔ∏è  Handler registered: {handler_name}")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–æ—Ç–∞
class BotLogHelper(LogHelper):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–æ—Ç–∞."""
    
    def bot_startup(self, details: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
        msg = f"ü§ñ Bot startup"
        if details:
            msg += f" - {details}"
        self.logger.info(msg)
    
    def user_blocked_cleanup(self, user_id: int, username: str, name: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.logger.warning(f"üö´ User blocked cleanup: {name} (@{username}, ID:{user_id})")
    
    def registration_limit_reached(self, role: str, current: int, limit: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."""
        self.logger.warning(f"üîí Registration limit reached for {role}: {current}/{limit}")
    
    def waitlist_notification(self, user_id: int, position: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è."""
        self.logger.info(f"‚è∞ Waitlist notification sent to user_id={user_id} (position: {position})")
    
    def payment_status_change(self, user_id: int, old_status: str, new_status: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã."""
        status_emoji = "üí∞" if new_status == "paid" else "‚è≥"
        self.logger.info(f"{status_emoji} Payment status changed for user_id={user_id}: {old_status} ‚Üí {new_status}")
    
    def race_archived(self, date: str, participants: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–Ω–∫–∏."""
        self.logger.info(f"üì¶ Race archived for date {date} with {participants} participants")
    
    def backup_created(self, backup_type: str, size: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."""
        msg = f"üíæ Backup created: {backup_type}"
        if size:
            msg += f" (size: {size})"
        self.logger.info(msg)
    
    def test_telegram_error_notification(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫ –≤ Telegram –≥—Ä—É–ø–ø—É."""
        self.logger.error("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ ERROR —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
    def critical_system_error(self, error_msg: str, details: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
        msg = f"üî• CRITICAL SYSTEM ERROR: {error_msg}"
        if details:
            msg += f" - {details}"
        self.logger.critical(msg)
    
    def get_error_statistics(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞."""
        if hasattr(_logging_config, 'telegram_handler') and _logging_config.telegram_handler:
            handler = _logging_config.telegram_handler
            
            stats = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:</b>\n\n"
            stats += f"üìà <b>–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫:</b> {handler._total_errors}\n\n"
            
            if handler._error_counts:
                stats += f"üîç <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (—É–±—ã–≤–∞–Ω–∏–µ)
                sorted_errors = sorted(handler._error_counts.items(), key=lambda x: x[1], reverse=True)
                for error_type, count in sorted_errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
                    module_name = error_type.split(':')[0].split('.')[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –º–æ–¥—É–ª—è
                    level = error_type.split(':')[1]
                    stats += f"‚Ä¢ <code>{module_name}</code> ({level}): {count} —Ä–∞–∑\n"
                
                if len(sorted_errors) > 10:
                    stats += f"‚Ä¢ ... –∏ –µ—â—ë {len(sorted_errors) - 10} —Ç–∏–ø–æ–≤\n"
            else:
                stats += f"‚úÖ <b>–û—à–∏–±–æ–∫ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ</b>\n"
            
            return stats
        else:
            return "‚ùå Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
log = BotLogHelper(__name__)
bot_log = BotLogHelper(__name__)