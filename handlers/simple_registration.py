"""
–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
1. /start -> –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ pending_registrations
2. –í–≤–æ–¥ –∏–º–µ–Ω–∏
3. –í—ã–±–æ—Ä —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –±–µ–≥—É–Ω)
4. –í–≤–æ–¥ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
5. –í—ã–±–æ—Ä –ø–æ–ª–∞
6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ—Ç–æ–≤: –ª–∏–±–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –ª–∏–±–æ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
7. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""

import os
from datetime import datetime
from pytz import timezone
from aiogram import Dispatcher, Bot, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from .utils import (
    logger,
    messages,
    config,
    RegistrationForm,
    create_gender_keyboard,
    create_main_menu_keyboard,
    get_participation_fee_text,
    log,
)
from .validation import validate_name, validate_time_format, sanitize_input
from database import (
    get_participant_by_user_id,
    add_pending_registration,
    add_participant,
    get_participant_count_by_role,
    get_setting,
    delete_pending_registration,
    add_to_waitlist,
    is_user_in_waitlist,
    is_current_event_active,
)


def create_runner_only_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ü–∏–µ–π –±–µ–≥—É–Ω–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üèÉ –ë–µ–≥—É–Ω", callback_data="role_runner"
                )
            ],
        ]
    )
    return keyboard


def create_start_registration_keyboard():
    """–°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üèÉ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –±–µ–≥—É–Ω", callback_data="start_registration"
                )
            ]
        ]
    )
    return keyboard


async def handle_start_command(message: Message, state: FSMContext, bot: Bot, admin_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    log.command_received("/start", user_id, message.from_user.username)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id == admin_id:
        log.admin_action("start_command_accessed", user_id)
        try:
            from .utils import create_admin_commands_keyboard
            await message.answer(
                messages["admin_commands"],
                reply_markup=create_admin_commands_keyboard(),
            )
        except Exception as e:
            log.notification_sent("admin_commands", user_id, False, str(e))
            await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_end_date = get_setting("reg_end_date")
    if reg_end_date:
        try:
            end_date = datetime.strptime(reg_end_date, "%H:%M %d.%m.%Y")
            moscow_tz = timezone("Europe/Moscow")
            end_date = moscow_tz.localize(end_date)
            current_time = datetime.now(moscow_tz)
            if current_time > end_date:
                afisha_path = "/app/images/afisha.jpeg"
                try:
                    if os.path.exists(afisha_path):
                        await bot.send_photo(
                            chat_id=message.from_user.id,
                            photo=FSInputFile(afisha_path),
                            caption=messages["registration_closed"],
                            parse_mode="HTML"
                        )
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∞—Ñ–∏—à–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={message.from_user.id}")
                    else:
                        await message.answer(messages["registration_closed"])
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∞—Ñ–∏—à–∏) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id={message.from_user.id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
                    await message.answer(messages["registration_closed"])
                return
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç reg_end_date: {reg_end_date}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    from .archive_handlers import handle_historical_participant
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é
    if not is_current_event_active():
        historical_handled = await handle_historical_participant(user_id, message)
        if historical_handled:
            return
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–Ω–∏–∫,
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        participant = get_participant_by_user_id(user_id)
        if not participant and not is_user_in_waitlist(user_id):
            historical_handled = await handle_historical_participant(user_id, message)
            if historical_handled:
                return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    participant = get_participant_by_user_id(user_id)
    if participant:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        name = participant[2]
        target_time = participant[3] or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        role = "–±–µ–≥—É–Ω" if participant[4] == "runner" else "–≤–æ–ª–æ–Ω—Ç—ë—Ä"
        bib_number = f"‚Ññ {participant[7]}" if participant[7] else "–Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω"
        payment_status = participant[6]
        gender = "–º—É–∂—Å–∫–æ–π" if participant[9] == "male" else "–∂–µ–Ω—Å–∫–∏–π" if participant[9] == "female" else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —ç–º–æ–¥–∑–∏
        if participant[10]:
            category_emoji = {
                "–≠–ª–∏—Ç–∞": "ü•á",
                "–ö–ª–∞—Å—Å–∏–∫–∞": "üèÉ", 
                "–ñ–µ–Ω—Å–∫–∏–π": "üë©",
                "–ö–æ–º–∞–Ω–¥–∞": "üë•"
            }.get(participant[10], "üìÇ")
            category = f"{category_emoji} {participant[10]}"
        else:
            category = "üìÇ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        
        # –ö–ª–∞—Å—Ç–µ—Ä —Å —ç–º–æ–¥–∑–∏
        if participant[11]:
            cluster_emoji = {
                "A": "üÖ∞Ô∏è", "B": "üÖ±Ô∏è", "C": "üÖ≤", "D": "üÖ≥", "E": "üÖ¥"
            }.get(participant[11], "üéØ")
            cluster = f"{cluster_emoji} {participant[11]}"
        else:
            cluster = "üéØ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        payment_emoji = "‚úÖ" if payment_status == "paid" else "‚è≥"
        payment_text = "–æ–ø–ª–∞—á–µ–Ω–æ" if payment_status == "paid" else "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        participant_info = (
            f"‚úÖ <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            f"üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"‚Ä¢ –ò–º—è: {name}\n"
            f"‚Ä¢ –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {target_time}\n"
            f"‚Ä¢ –ü–æ–ª: {gender}\n"
            f"‚Ä¢ –ë–µ–≥–æ–≤–æ–π –Ω–æ–º–µ—Ä: {bib_number}\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"‚Ä¢ –ö–ª–∞—Å—Ç–µ—Ä: {cluster}\n\n"
            f"üí∞ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> {payment_emoji} {payment_text}\n\n"
        )
        
        if payment_status != "paid":
            participant_info += f"üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É —É—á–∞—Å—Ç–∏—è {get_participation_fee_text()}!"
        else:
            participant_info += "üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Å—Ç–∞—Ä—Ç—É! –£–≤–∏–¥–∏–º—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!"
            
        await message.answer(participant_info)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    if is_user_in_waitlist(user_id):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ,
        # —Ç–æ –Ω–µ –¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        from database import get_waitlist_by_user_id
        waitlist_entry = get_waitlist_by_user_id(user_id)
        
        if waitlist_entry and waitlist_entry[9] == 'confirmed':  # status at index 9
            await message.answer(
                "‚úÖ –í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è!\n\n"
                "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            return
        elif waitlist_entry and waitlist_entry[9] in ['waiting', 'notified', 'declined']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            max_runners = get_setting("max_runners")
            current_runners = get_participant_count_by_role("runner")
            
            # Ensure we have valid integers for calculation
            try:
                max_runners = int(max_runners) if max_runners is not None else 0
                current_runners = int(current_runners) if current_runners is not None else 0
            except (ValueError, TypeError):
                max_runners = 0
                current_runners = 0
            
            available_slots = max_runners - current_runners if max_runners > 0 else 0
            
            if available_slots > 0:
                # –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ
                from .waitlist_handlers import create_participation_confirmation_keyboard
                await message.answer(
                    f"üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b>\n\n"
                    f"–î–ª—è –≤–∞—Å –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ!\n\n"
                    f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {available_slots} –∏–∑ {max_runners}\n"
                    f"‚è∞ <b>–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ?</b>",
                    reply_markup=create_participation_confirmation_keyboard()
                )
            else:
                # –ú–µ—Å—Ç –Ω–µ—Ç - —Å–æ–æ–±—â–∞–µ–º –æ —Å—Ç–∞—Ç—É—Å–µ
                await message.answer(
                    "üìã –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è!\n\n"
                    f"üìä –ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç: {current_runners} –∏–∑ {max_runners}\n"
                    f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –º–µ—Å—Ç–∞.\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /waitlist_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏."
                )
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ pending_registrations
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    success = add_pending_registration(user_id, username)
    
    if not success:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ñ–∏—à–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        start_message = messages["start_message"].format(fee=get_participation_fee_text())
        
        afisha_path = "/app/images/afisha.jpeg"
        if os.path.exists(afisha_path):
            await bot.send_photo(
                chat_id=user_id,
                photo=FSInputFile(path=afisha_path),
                caption=start_message,
                reply_markup=create_start_registration_keyboard(),
            )
        else:
            await message.answer(
                start_message,
                reply_markup=create_start_registration_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            messages["start_message"].format(fee=get_participation_fee_text()),
            reply_markup=create_start_registration_keyboard()
        )


async def handle_start_registration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    await state.set_state(RegistrationForm.waiting_for_name)
    await callback.answer()


async def handle_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    name = sanitize_input(message.text, 50)
    
    is_valid, error_message = validate_name(name)
    if not is_valid:
        await message.answer(f"‚ùå {error_message}", reply_markup=create_main_menu_keyboard())
        return
    
    await state.update_data(name=name, role="runner")
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç—Ä–∞—Å—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '5:30' –∏–ª–∏ '1:05:30'):"
    )
    await state.set_state(RegistrationForm.waiting_for_target_time)




async def handle_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    target_time = sanitize_input(message.text, 10)
    
    is_valid, error_message = validate_time_format(target_time)
    if not is_valid:
        await message.answer(f"‚ùå {error_message}", reply_markup=create_main_menu_keyboard())
        return
    
    await state.update_data(target_time=target_time)
    await message.answer(
        "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=create_gender_keyboard()
    )
    await state.set_state(RegistrationForm.waiting_for_gender)


async def handle_gender_selection(callback: CallbackQuery, state: FSMContext, bot: Bot, admin_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if callback.data not in ["male", "female"]:
        await callback.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª–∞.")
        await callback.answer()
        await state.clear()
        return
    
    user_id = callback.from_user.id
    user_data = await state.get_data()
    username = callback.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    name = user_data.get("name")
    target_time = user_data.get("target_time")
    role = "runner"
    gender = callback.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    max_runners = get_setting("max_runners")
    if max_runners is None:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await callback.answer()
        await state.clear()
        return
    
    current_runners = get_participant_count_by_role("runner")
    
    # Ensure we have valid integers for comparison
    try:
        max_runners = int(max_runners)
        current_runners = int(current_runners) if current_runners is not None else 0
    except (ValueError, TypeError):
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await callback.answer()
        await state.clear()
        return
    
    if current_runners >= max_runners:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è
        success = add_to_waitlist(user_id, username, name, target_time, role, gender)
        
        if success:
            # –ù–ï —É–¥–∞–ª—è–µ–º –∏–∑ pending - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ pending –∏ waitlist –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            # delete_pending_registration(user_id)  # –£–±—Ä–∞–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
            
            await callback.message.edit_text(
                f"üìã <b>–í—Å–µ —Å–ª–æ—Ç—ã –¥–ª—è –±–µ–≥—É–Ω–æ–≤ –∑–∞–Ω—è—Ç—ã!</b>\n\n"
                f"‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è.\n"
                f"üì± –£–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ!\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /waitlist_status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            try:
                from database import get_waitlist_by_role
                waitlist_count = len(get_waitlist_by_role("runner"))
                
                admin_text = (
                    f"üìã <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è</b>\n\n"
                    f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {name} (@{username})\n"
                    f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                    f"‚è∞ <b>–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è:</b> {target_time}\n"
                    f"üë§ <b>–ü–æ–ª:</b> {'–º—É–∂—Å–∫–æ–π' if gender == 'male' else '–∂–µ–Ω—Å–∫–∏–π'}\n"
                    f"üìä <b>–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {waitlist_count}\n"
                    f"üíº <b>–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç:</b> {max_runners}\n"
                )
                
                await bot.send_message(admin_id, admin_text)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    else:
        # –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = add_participant(user_id, username, name, target_time, role, gender)
        
        if success:
            # –£–¥–∞–ª—è–µ–º –∏–∑ pending_registrations
            delete_pending_registration(user_id)
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            gender_display = "–º—É–∂—Å–∫–æ–π" if gender == "male" else "–∂–µ–Ω—Å–∫–∏–π"
            success_message = (
                f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
                f"‚Ä¢ –ò–º—è: {name}\n"
                f"‚Ä¢ –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {target_time}\n"
                f"‚Ä¢ –ü–æ–ª: {gender_display}\n"
                f"‚Ä¢ –†–æ–ª—å: –±–µ–≥—É–Ω\n\n"
                f"üí∞ <b>–í–∞–∂–Ω–æ:</b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É —É—á–∞—Å—Ç–∏—è {get_participation_fee_text()}!\n"
                f"üì± –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
            )
            
            await callback.message.edit_text(success_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                sponsor_image_path = config.get(
                    "sponsor_image_path", "/app/images/sponsor_image.jpeg"
                )
                if os.path.exists(sponsor_image_path):
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=FSInputFile(path=sponsor_image_path),
                        caption="ü§ù –ù–∞—à–∏ —Å–ø–æ–Ω—Å–æ—Ä—ã"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                admin_message = (
                    f"üÜï <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>\n\n"
                    f"üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {name}\n"
                    f"‚è∞ <b>–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è:</b> {target_time}\n"
                    f"üë§ <b>–ü–æ–ª:</b> {gender_display}\n"
                    f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>{user_id}</code>\n"
                    f"üì± <b>Username:</b> @{username}\n\n"
                    f"üé≠ <b>–†–æ–ª—å:</b> –±–µ–≥—É–Ω\n"
                    f"üí∞ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                    f"üìä <b>–í—Å–µ–≥–æ –±–µ–≥—É–Ω–æ–≤:</b> {current_runners + 1}/{max_runners}"
                )
                
                await bot.send_message(admin_id, admin_message)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    await callback.answer()
    await state.clear()


def register_simple_registration_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–æ—â—ë–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    # –ö–æ–º–∞–Ω–¥–∞ /start
    async def start_wrapper(message: Message, state: FSMContext):
        await handle_start_command(message, state, bot, admin_id)
    
    dp.message.register(
        start_wrapper,
        CommandStart()
    )
    
    # –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    dp.callback_query.register(
        handle_start_registration,
        F.data == "start_registration"
    )
    
    # –í–≤–æ–¥ –∏–º–µ–Ω–∏
    dp.message.register(
        handle_name_input,
        StateFilter(RegistrationForm.waiting_for_name)
    )
    
    
    # –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    dp.message.register(
        handle_time_input,
        StateFilter(RegistrationForm.waiting_for_target_time)
    )
    
    # –í—ã–±–æ—Ä –ø–æ–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    async def gender_wrapper(callback: CallbackQuery, state: FSMContext):
        await handle_gender_selection(callback, state, bot, admin_id)
    
    dp.callback_query.register(
        gender_wrapper,
        StateFilter(RegistrationForm.waiting_for_gender)
    )
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async def handle_user_main_menu(callback: CallbackQuery, state: FSMContext):
        """Handle main menu button for regular users - same as /start"""
        # If it's admin, redirect to admin panel
        if callback.from_user.id == admin_id:
            from .utils import create_admin_commands_keyboard
            await callback.message.edit_text(
                "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=create_admin_commands_keyboard(),
            )
            await callback.answer()
            return
            
        await state.clear()
        await handle_start_command(callback.message, state, bot, admin_id)
        await callback.answer()
    
    dp.callback_query.register(
        handle_user_main_menu,
        F.data == "main_menu"
    )
    
    logger.info("–£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")