import os
import json
from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from .utils import (
    messages,
    RegistrationForm,
    logger,
    messages,
    config,
    RegistrationForm,
    get_participation_fee_text,
    get_event_date_text,
    get_event_location_text,
)


def register_info_media_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –º–µ–¥–∏–∞")

    @dp.message(Command("info"))
    async def show_info(message: Message):
        """Show info to regular users"""
        user_id = message.from_user.id
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /info –æ—Ç user_id={user_id}")
        afisha_path = "/app/images/afisha.jpeg"
        try:
            if os.path.exists(afisha_path):
                await bot.send_photo(
                    chat_id=message.from_user.id,
                    photo=FSInputFile(afisha_path),
                    caption=messages["info_message"].format(
                        fee=get_participation_fee_text(),
                        event_date=get_event_date_text(),
                        event_location=get_event_location_text()
                    ),
                )
                logger.info(
                    f"–ê—Ñ–∏—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º info_message –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={message.from_user.id}"
                )
            else:
                await message.answer(
                    messages["info_message"].format(
                        fee=get_participation_fee_text(),
                        event_date=get_event_date_text(),
                        event_location=get_event_location_text()
                    )
                )
                logger.info(
                    f"–ê—Ñ–∏—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç info_message –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={message.from_user.id}"
                )
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è /info –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={message.from_user.id}: {e}"
            )
            await message.answer(
                messages["info_message"].format(
                    fee=get_participation_fee_text(),
                    event_date=get_event_date_text(),
                    event_location=get_event_location_text()
                )
            )

    @dp.message(Command("create_afisha"))
    @dp.callback_query(F.data == "admin_create_afisha")
    async def create_afisha(event: [Message, CallbackQuery], state: FSMContext):
        user_id = event.from_user.id
        if user_id != admin_id:
            await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ñ–∏—à–∏ –æ—Ç user_id={user_id}")

        if isinstance(event, CallbackQuery):
            await event.message.delete()
            message = event.message
            await event.answer()
        else:
            await event.delete()
            message = event

        # Check if afisha already exists
        afisha_path = "/app/images/afisha.jpeg"
        afisha_exists = os.path.exists(afisha_path)

        text = "üñº <b>–û–±–Ω–æ–≤–∏—Ç—å –∞—Ñ–∏—à—É</b>\n\n"

        if afisha_exists:
            try:
                # Get file size and modification time
                file_stat = os.stat(afisha_path)
                file_size = file_stat.st_size / 1024  # KB
                from datetime import datetime

                mod_time = datetime.fromtimestamp(file_stat.st_mtime)

                text += f"üìä <b>–¢–µ–∫—É—â–∞—è –∞—Ñ–∏—à–∞:</b>\n"
                text += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {file_size:.1f} –ö–ë\n"
                text += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {mod_time.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"‚Ä¢ –ü—É—Ç—å: {afisha_path}\n\n"
                text += "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –∞—Ñ–∏—à–∏\n"
            except Exception as e:
                text += "üìä –¢–µ–∫—É—â–∞—è –∞—Ñ–∏—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n"
                text += "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã\n"
        else:
            text += "üìä –ê—Ñ–∏—à–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
            text += "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ñ–∏—à–∏\n"

        text += "\nüìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:</b>\n"
        text += "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG\n"
        text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: –¥–æ 10 –ú–ë\n"
        text += "‚Ä¢ –ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ afisha.jpeg\n"
        text += "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∫–æ–º–∞–Ω–¥–µ /info"

        await message.answer(text)
        await state.set_state(RegistrationForm.waiting_for_afisha_image)

    @dp.message(StateFilter(RegistrationForm.waiting_for_afisha_image), F.photo)
    async def process_afisha_image(message: Message, state: FSMContext):
        if message.from_user.id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ñ–∏—à–∏ –æ—Ç user_id={message.from_user.id}")

        try:
            afisha_path = "/app/images/afisha.jpeg"

            # Check if directory exists
            os.makedirs(os.path.dirname(afisha_path), exist_ok=True)

            # Get the largest photo resolution
            photo = message.photo[-1]
            file = await bot.get_file(photo.file_id)

            # Check file size (Telegram photo limit is usually reasonable, but let's be safe)
            file_size_mb = file.file_size / (1024 * 1024) if file.file_size else 0

            if file.file_size and file.file_size > 20 * 1024 * 1024:  # 20MB limit
                await message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë.")
                return

            # Download and save the file
            await bot.download_file(file.file_path, afisha_path)
            os.chmod(afisha_path, 0o644)

            # Get file info for confirmation
            file_stat = os.stat(afisha_path)
            final_size_kb = file_stat.st_size / 1024

            text = "‚úÖ <b>–ê—Ñ–∏—à–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>\n\n"
            text += f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</b>\n"
            text += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {final_size_kb:.1f} –ö–ë\n"
            text += f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {photo.width}x{photo.height}px\n"
            text += f"‚Ä¢ –ü—É—Ç—å: {afisha_path}\n\n"
            text += "üîÑ –ê—Ñ–∏—à–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∫–æ–º–∞–Ω–¥–µ /info\n\n"
            text += "üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /info"

            await message.answer(text)
            logger.info(
                f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ñ–∏—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {afisha_path}, —Ä–∞–∑–º–µ—Ä: {final_size_kb:.1f} –ö–ë"
            )

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ñ–∏—à–∏ –æ—Ç user_id={message.from_user.id}: {e}"
            )
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞—Ñ–∏—à–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
            )

        await state.clear()

    @dp.message(StateFilter(RegistrationForm.waiting_for_afisha_image))
    async def process_afisha_non_photo(message: Message, state: FSMContext):
        """Handle non-photo messages in afisha upload mode"""
        await message.answer(
            "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ñ–∏—à–∏.\n\n"
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "üîÑ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )

    @dp.message(Command("update_sponsor"))
    @dp.callback_query(F.data == "admin_update_sponsor")
    async def update_sponsor(event: [Message, CallbackQuery], state: FSMContext):
        user_id = event.from_user.id
        if user_id != admin_id:
            await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –æ—Ç user_id={user_id}")

        if isinstance(event, CallbackQuery):
            await event.message.delete()
            message = event.message
            await event.answer()
        else:
            await event.delete()
            message = event

        # Check if sponsor image already exists
        sponsor_path = config.get(
            "sponsor_image_path", "/app/images/sponsor_image.jpeg"
        )
        sponsor_exists = os.path.exists(sponsor_path)

        text = "ü§ù <b>–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"

        if sponsor_exists:
            try:
                # Get file size and modification time
                file_stat = os.stat(sponsor_path)
                file_size = file_stat.st_size / 1024  # KB
                from datetime import datetime

                mod_time = datetime.fromtimestamp(file_stat.st_mtime)

                text += f"üìä <b>–¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>\n"
                text += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {file_size:.1f} –ö–ë\n"
                text += f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {mod_time.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"‚Ä¢ –ü—É—Ç—å: {sponsor_path}\n\n"
                text += "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã\n"
            except Exception as e:
                text += "üìä –¢–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n\n"
                text += "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã\n"
        else:
            text += "üìä –°–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
            text += "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n"

        text += "\nüìã <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:</b>\n"
        text += "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG\n"
        text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: –¥–æ 10 –ú–ë\n"
        text += "‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, –±–∞–Ω–Ω–µ—Ä—ã –∏ —Ç.–¥.\n"
        text += "‚Ä¢ –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö"

        await message.answer(text)
        await state.set_state(RegistrationForm.waiting_for_sponsor_image)

    @dp.message(StateFilter(RegistrationForm.waiting_for_sponsor_image), F.photo)
    async def process_sponsor_image(message: Message, state: FSMContext):
        if message.from_user.id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –æ—Ç user_id={message.from_user.id}")

        try:
            sponsor_path = config.get(
                "sponsor_image_path", "/app/images/sponsor_image.jpeg"
            )

            # Check if directory exists
            os.makedirs(os.path.dirname(sponsor_path), exist_ok=True)

            # Get the largest photo resolution
            photo = message.photo[-1]
            file = await bot.get_file(photo.file_id)

            # Check file size
            if file.file_size and file.file_size > 20 * 1024 * 1024:  # 20MB limit
                await message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë.")
                return

            # Download and save the file
            await bot.download_file(file.file_path, sponsor_path)
            os.chmod(sponsor_path, 0o644)

            # Get file info for confirmation
            file_stat = os.stat(sponsor_path)
            final_size_kb = file_stat.st_size / 1024

            text = "‚úÖ <b>–°–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ</b>\n\n"
            text += f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:</b>\n"
            text += f"‚Ä¢ –†–∞–∑–º–µ—Ä: {final_size_kb:.1f} –ö–ë\n"
            text += f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {photo.width}x{photo.height}px\n"
            text += f"‚Ä¢ –ü—É—Ç—å: {sponsor_path}\n\n"
            text += "üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö\n\n"
            text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"

            await message.answer(text)
            logger.info(
                f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {sponsor_path}, —Ä–∞–∑–º–µ—Ä: {final_size_kb:.1f} –ö–ë"
            )

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –æ—Ç user_id={message.from_user.id}: {e}"
            )
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."
            )

        await state.clear()

    @dp.message(StateFilter(RegistrationForm.waiting_for_sponsor_image))
    async def process_sponsor_non_photo(message: Message, state: FSMContext):
        """Handle non-photo messages in sponsor upload mode"""
        await message.answer(
            "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤.\n\n"
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            "üîÑ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )

    @dp.message(Command("update_welcome"))
    @dp.callback_query(F.data == "admin_welcome")
    async def update_welcome_message(
        event: [Message, CallbackQuery], state: FSMContext
    ):
        """Update welcome message"""
        user_id = event.from_user.id
        if user_id != admin_id:
            await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        logger.info(
            f"–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}"
        )

        if isinstance(event, CallbackQuery):
            await event.message.delete()
            message = event.message
            await event.answer()
        else:
            await event.delete()
            message = event

        # Get current welcome message
        current_welcome = messages.get("start_message", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        text = f"üëã <b>–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        text += f"üìù <b>–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
        text += f"<code>{current_welcome}</code>\n\n"
        text += f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        text += f"‚Ä¢ HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n"
        text += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤\n"
        text += f"‚Ä¢ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start"

        await message.answer(text)
        await state.set_state(RegistrationForm.waiting_for_welcome_message)

    @dp.message(RegistrationForm.waiting_for_welcome_message)
    async def process_welcome_message(message: Message, state: FSMContext):
        """Process new welcome message"""
        if message.from_user.id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        if not message.text:
            await message.answer(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        new_welcome = message.text.strip()
        if len(new_welcome) > 4096:
            await message.answer(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        try:
            # Update the messages.json file
            messages_path = "/app/messages.json"

            # Read current messages
            if os.path.exists(messages_path):
                with open(messages_path, "r", encoding="utf-8") as f:
                    current_messages = json.load(f)
            else:
                current_messages = {}

            # Update welcome message
            old_welcome = current_messages.get("start_message", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            current_messages["start_message"] = new_welcome

            # Save updated messages
            with open(messages_path, "w", encoding="utf-8") as f:
                json.dump(current_messages, f, ensure_ascii=False, indent=2)

            # Update the global messages dict
            messages["start_message"] = new_welcome

            text = "‚úÖ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>"

            await message.answer(text)
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

        await state.clear()

    @dp.message(Command("update_info"))
    @dp.callback_query(F.data == "admin_info")
    async def update_info_message(event: [Message, CallbackQuery], state: FSMContext):
        """Update information message"""
        user_id = event.from_user.id
        if user_id != admin_id:
            await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        logger.info(
            f"–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç user_id={user_id}"
        )

        if isinstance(event, CallbackQuery):
            await event.message.delete()
            message = event.message
            await event.answer()
        else:
            await event.delete()
            message = event

        # Get current info message
        current_info = messages.get("info_message", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        text = "‚ÑπÔ∏è <b>–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        text += "üìù <b>–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
        text += f"<code>{current_info}</code>\n\n"
        text += "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        text += "‚Ä¢ HTML —Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n"
        text += "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤\n"
        text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {fee} –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ü–µ–Ω—ã —É—á–∞—Å—Ç–∏—è\n"
        text += "‚Ä¢ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /info"

        await message.answer(text)
        await state.set_state(RegistrationForm.waiting_for_info_message)

    @dp.message(RegistrationForm.waiting_for_info_message)
    async def process_info_message(message: Message, state: FSMContext):
        """Process new information message"""
        if message.from_user.id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return

        if not message.text:
            await message.answer(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        new_info = message.text.strip()
        if len(new_info) > 4096:
            await message.answer(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return

        try:
            # Update the messages.json file
            messages_path = "/app/messages.json"

            # Read current messages
            if os.path.exists(messages_path):
                with open(messages_path, "r", encoding="utf-8") as f:
                    current_messages = json.load(f)
            else:
                current_messages = {}

            # Update info message
            old_info = current_messages.get("info_message", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            current_messages["info_message"] = new_info

            # Save updated messages
            with open(messages_path, "w", encoding="utf-8") as f:
                json.dump(current_messages, f, ensure_ascii=False, indent=2)

            # Update the global messages dict
            messages["info_message"] = new_info

            text = "‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
            text += "üìù <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
            text += f"<code>{new_info}</code>\n\n"
            text += "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.\n"
            text += "üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /info"

            await message.answer(text)
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

        await state.clear()

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –º–µ–¥–∏–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
