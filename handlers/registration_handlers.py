import os
import re
from datetime import datetime
from pytz import timezone

from aiogram import Dispatcher, Bot, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    FSInputFile,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from .utils import (
    logger,
    messages,
    config,
    RegistrationForm,
    create_role_keyboard,
    create_register_keyboard,
    create_gender_keyboard,
)
from database import (
    add_participant,
    get_participant_by_user_id,
    add_pending_registration,
    delete_pending_registration,
    get_setting,
    get_participant_count_by_role,
    get_participant_count,
)


def register_registration_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    def create_admin_commands_keyboard():
        commands = [
            ("participants", "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
            ("pending", "‚è≥ –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"),
            ("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            ("paid", "üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"),
            ("set_bib", "üè∑ –ü—Ä–∏—Å–≤–æ–∏—Ç—å –Ω–æ–º–µ—Ä"),
            ("remove", "üóë –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
            ("export", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
            ("info", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–±–µ–≥–µ"),
            ("create_afisha", "üñº –û–±–Ω–æ–≤–∏—Ç—å –∞—Ñ–∏—à—É"),
            ("update_sponsor", "üéØ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞"),
            ("edit_runners", "üèÉ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç"),
            ("set_reg_end_date", "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É"),
            ("notify_all", "üì¢ –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö"),
            ("notify_with_text", "‚úâÔ∏è –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
            ("notify_unpaid", "üí∏ –£–≤–µ–¥–æ–º–∏—Ç—å –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö"),
            ("save_race", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–Ω–∫—É"),
            ("clear_participants", "üóë –û—á–∏—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"),
            ("past_races", "üìú –ü—Ä–æ—à–µ–¥—à–∏–µ –≥–æ–Ω–∫–∏"),
            ("notify_results", "üèÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"),
            ("top_winners", "üèÜ –¢—Ä–æ–π–∫–∞ –ª—É—á—à–∏—Ö"),
            ("protocol", "üìù –ü—Ä–æ—Ç–æ–∫–æ–ª"),
            ("main_menu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ]
        keyboard_buttons = [
            [
                InlineKeyboardButton(
                    text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", callback_data="category_participants"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–æ–π", callback_data="category_race"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                    callback_data="category_notifications",
                )
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    def create_participants_category_keyboard():
        keyboard_buttons = [
            [
                InlineKeyboardButton(
                    text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="admin_participants"
                ),
                InlineKeyboardButton(
                    text="‚è≥ –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_pending"
                ),
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(
                    text="üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="admin_paid"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üè∑ –ü—Ä–∏—Å–≤–æ–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="admin_set_bib"
                ),
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="admin_remove"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export"
                ),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    def create_race_category_keyboard():
        keyboard_buttons = [
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–±–µ–≥–µ", callback_data="admin_info"
                ),
                InlineKeyboardButton(
                    text="üñº –û–±–Ω–æ–≤–∏—Ç—å –∞—Ñ–∏—à—É", callback_data="admin_create_afisha"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üéØ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞", callback_data="admin_update_sponsor"
                ),
                InlineKeyboardButton(
                    text="üèÉ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="admin_edit_runners"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É", callback_data="admin_set_reg_end_date"
                ),
                InlineKeyboardButton(
                    text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–Ω–∫—É", callback_data="admin_save_race"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üóë –û—á–∏—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    callback_data="admin_clear_participants",
                ),
                InlineKeyboardButton(
                    text="üìú –ü—Ä–æ—à–µ–¥—à–∏–µ –≥–æ–Ω–∫–∏", callback_data="admin_past_races"
                ),
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    def create_notifications_category_keyboard():
        keyboard_buttons = [
            [
                InlineKeyboardButton(
                    text="üì¢ –£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö", callback_data="admin_notify_all"
                ),
                InlineKeyboardButton(
                    text="‚úâÔ∏è –ö–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                    callback_data="admin_notify_with_text",
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üí∏ –£–≤–µ–¥–æ–º–∏—Ç—å –Ω–µ–æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö",
                    callback_data="admin_notify_unpaid",
                ),
                InlineKeyboardButton(
                    text="üèÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="admin_notify_results"
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üìù –ü—Ä–æ—Ç–æ–∫–æ–ª", callback_data="admin_protocol"
                ),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    @dp.message(CommandStart())
    async def cmd_start(message: Message, state: FSMContext):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id={message.from_user.id}")
        if message.from_user.id == admin_id:
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={message.from_user.id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
            try:
                await message.answer(
                    messages["admin_commands"],
                    reply_markup=create_admin_commands_keyboard(),
                )
            except TelegramBadRequest as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ TelegramBadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ admin_commands: {e}"
                )
                await message.answer(messages["admin_commands"], parse_mode=None)
                logger.info(
                    f"admin_commands –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ parse_mode –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={message.from_user.id}"
                )
            await state.clear()
            return
        participant = get_participant_by_user_id(message.from_user.id)
        if participant:
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={message.from_user.id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            )
            name = participant[2]
            target_time = participant[3]
            role = participant[4]
            bib_number = participant[7] if participant[7] is not None else "–Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω"
            time_field = (
                f"–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {target_time}" if role == "runner" else "–í—ã –≤–æ–ª–æ–Ω—Ç–µ—Ä"
            )
            await message.answer(
                messages["already_registered"].format(
                    name=name, time_field=time_field, role=role, bib_number=bib_number
                )
            )
            await state.clear()
            return
        success = add_pending_registration(
            message.from_user.id, username=message.from_user.username
        )
        if not success:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ user_id={message.from_user.id} –≤ pending_registrations"
            )
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        afisha_path = "/app/images/afisha.jpeg"
        try:
            if os.path.exists(afisha_path):
                await bot.send_photo(
                    chat_id=message.from_user.id,
                    photo=FSInputFile(afisha_path),
                    caption=messages["start_message"],
                    reply_markup=create_register_keyboard(),
                    parse_mode="HTML",
                )
                logger.info(
                    f"–ê—Ñ–∏—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º start_message –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={message.from_user.id}"
                )
            else:
                await message.answer(
                    messages["start_message"],
                    reply_markup=create_register_keyboard(),
                    parse_mode="HTML",
                )
                logger.info(
                    f"–ê—Ñ–∏—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç start_message —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={message.from_user.id}"
                )
        except TelegramBadRequest as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={message.from_user.id}: {e}"
            )
            await message.answer(
                messages["start_message"],
                reply_markup=create_register_keyboard(),
                parse_mode="HTML",
            )

    @dp.callback_query(F.data == "start_registration")
    async def process_start_registration(callback_query, state: FSMContext):
        logger.info(
            f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –æ—Ç user_id={callback_query.from_user.id}"
        )
        reg_end_date = get_setting("reg_end_date")
        if reg_end_date:
            try:
                end_date = datetime.strptime(reg_end_date, "%H:%M %d.%m.%Y")
                moscow_tz = timezone("Europe/Moscow")
                end_date = moscow_tz.localize(end_date)
                current_time = datetime.now(moscow_tz)
                if current_time > end_date:
                    logger.info(
                        f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è: user_id={callback_query.from_user.id}"
                    )
                    await callback_query.message.answer(messages["registration_closed"])
                    await callback_query.message.delete()
                    return
            except ValueError:
                logger.error(
                    f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_end_date}"
                )
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        await state.set_state(RegistrationForm.waiting_for_name)
        await callback_query.answer()

    @dp.message(StateFilter(RegistrationForm.waiting_for_name))
    async def process_name(message: Message, state: FSMContext):
        name = message.text.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è: {name} –æ—Ç user_id={message.from_user.id}")
        await state.update_data(name=name)
        await message.answer(
            messages["role_prompt"], reply_markup=create_role_keyboard()
        )
        await state.set_state(RegistrationForm.waiting_for_role)

    @dp.callback_query(StateFilter(RegistrationForm.waiting_for_role))
    async def process_role(callback_query, state: FSMContext):
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –æ—Ç user_id={callback_query.from_user.id}")
        if callback_query.data not in ["role_runner", "role_volunteer"]:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏: {callback_query.data}")
            await callback_query.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–æ–ª–∏.")
            await callback_query.answer()
            await state.clear()
            return
        role = "runner" if callback_query.data == "role_runner" else "volunteer"
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {role} –¥–ª—è user_id={callback_query.from_user.id}")
        max_count = (
            get_setting("max_runners")
            if role == "runner"
            else get_setting("max_volunteers")
        )
        if max_count is None:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ max_{role}s –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback_query.message.answer(
                "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            await callback_query.answer()
            await state.clear()
            return
        current_count = get_participant_count_by_role(role)
        user_data = await state.get_data()
        name = user_data.get("name")
        username = callback_query.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        if current_count >= max_count:
            logger.info(f"–õ–∏–º–∏—Ç –¥–ª—è —Ä–æ–ª–∏ {role} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {current_count}/{max_count}")
            success = add_pending_registration(
                callback_query.from_user.id,
                username=username,
                name=name,
                target_time=user_data.get("target_time", ""),
                role=role,
            )
            if not success:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ user_id={callback_query.from_user.id} –≤ pending_registrations"
                )
                await callback_query.message.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                await callback_query.answer()
                await state.clear()
                return
            await callback_query.message.answer(messages[f"limit_exceeded_{role}"])
            if role == "runner":
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=messages["admin_limit_exceeded_notification"].format(
                            max_runners=max_count,
                            user_id=callback_query.from_user.id,
                            username=username,
                        ),
                    )
                    logger.info(
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –±–µ–≥—É–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id})"
                    )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}): {e}"
                    )
            await callback_query.answer()
            await state.clear()
            return
        await state.update_data(role=role)
        if role == "runner":
            await callback_query.message.answer(messages["target_time_prompt"])
            await state.set_state(RegistrationForm.waiting_for_target_time)
            await callback_query.answer()
        else:
            success = add_participant(
                callback_query.from_user.id, username, name, "", role, ""
            )
            if success:
                logger.info(
                    f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {name}, {role}, user_id={callback_query.from_user.id}"
                )
                time_field = "üí™üèº –í—ã –≤–æ–ª–æ–Ω—Ç–µ—Ä"
                extra_info = ""
                time_field = "üí™üèº " + time_field.split(" ")[2].capitalize()
                user_message = messages["registration_success"].format(
                    name=name, time_field=time_field, extra_info=extra_info
                )
                await callback_query.message.answer(user_message)
                admin_message = messages["admin_notification"].format(
                    name=name,
                    time_field=time_field,
                    user_id=callback_query.from_user.id,
                    username=username,
                    extra_info=extra_info,
                )
                try:
                    await bot.send_message(chat_id=admin_id, text=admin_message)
                    logger.info(
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                    )
                except TelegramBadRequest as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}): {e}"
                    )
                try:
                    image_path = config.get(
                        "sponsor_image_path", "/app/images/sponsor_image.jpeg"
                    )
                    if os.path.exists(image_path):
                        await bot.send_photo(
                            chat_id=callback_query.from_user.id,
                            photo=FSInputFile(image_path),
                            caption=messages["sponsor_message"],
                        )
                        logger.info(
                            f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={callback_query.from_user.id}"
                        )
                    else:
                        logger.warning(
                            f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤"
                        )
                        await callback_query.message.answer(messages["sponsor_message"])
                except TelegramForbiddenError:
                    logger.warning(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={callback_query.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç"
                    )
                    delete_pending_registration(callback_query.from_user.id)
                    logger.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={callback_query.from_user.id} —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã pending_registrations"
                    )
                    try:
                        await bot.send_message(
                            chat_id=admin_id,
                            text=messages["admin_blocked_notification"].format(
                                name=name,
                                username=username,
                                user_id=callback_query.from_user.id,
                            ),
                        )
                        logger.info(
                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}) –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                        )
                    except Exception as admin_e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_e}"
                        )
                except TelegramBadRequest as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={callback_query.from_user.id}: {e}"
                    )
                    await callback_query.message.answer(messages["sponsor_message"])
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É (admin_id={admin_id})"
                )
                participant_count = get_participant_count()
                logger.info(f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participant_count}")
                delete_pending_registration(callback_query.from_user.id)
            else:
                logger.error(
                    f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={callback_query.from_user.id}"
                )
                await callback_query.message.answer(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            await callback_query.answer()
            await state.clear()

    @dp.message(StateFilter(RegistrationForm.waiting_for_target_time))
    async def process_target_time(message: Message, state: FSMContext):
        target_time = message.text.strip()
        if not target_time:
            await message.answer(
                "–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç—Ä–∞—Å—Å(–Ω–∞–ø—Ä–∏–º–µ—Ä, '5:30' –∏–ª–∏ '1:05:30'):"
            )
            return
        time_pattern = re.compile(r"^(?:\d{1,2}:)?[0-5]?\d:[0-5]\d$")
        if not time_pattern.match(target_time):
            await message.answer(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'M:SS' –∏–ª–∏ 'H:MM:SS' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '5:30' –∏–ª–∏ '1:05:30'):"
            )
            return
        await state.update_data(target_time=target_time)
        await message.answer(
            messages["gender_prompt"], reply_markup=create_gender_keyboard()
        )
        await state.set_state(RegistrationForm.waiting_for_gender)

    @dp.callback_query(StateFilter(RegistrationForm.waiting_for_gender))
    async def process_gender(callback_query: CallbackQuery, state: FSMContext):
        gender = callback_query.data
        await callback_query.message.delete()
        user_id = callback_query.from_user.id
        user_data = await state.get_data()
        name = user_data.get("name")
        role = user_data.get("role")
        target_time = user_data.get("target_time")
        username = callback_query.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        success = add_participant(
            user_id,
            username,
            name,
            target_time,
            role,
            gender,
        )
        if success:
            logger.info(
                f"–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {name}, {role}, user_id={callback_query.from_user.id}"
            )
            time_field = f"–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {target_time}"
            extra_info = "üí∞ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.\n–ü–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è."
            user_message = messages["registration_success"].format(
                name=name, time_field=time_field, extra_info=extra_info
            )
            await callback_query.message.answer(user_message)
            admin_message = messages["admin_notification"].format(
                name=name,
                time_field=time_field,
                user_id=callback_query.from_user.id,
                username=username,
                extra_info=extra_info,
            )
            try:
                await bot.send_message(chat_id=admin_id, text=admin_message)
                logger.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                )
            except TelegramBadRequest as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}): {e}"
                )
            try:
                image_path = config.get(
                    "sponsor_image_path", "/app/images/sponsor_image.jpeg"
                )
                if os.path.exists(image_path):
                    await bot.send_photo(
                        chat_id=callback_query.from_user.id,
                        photo=FSInputFile(image_path),
                        caption=messages["sponsor_message"],
                    )
                    logger.info(
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={callback_query.from_user.id}"
                    )
                else:
                    logger.warning(
                        f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤"
                    )
                    await callback_query.message.answer(messages["sponsor_message"])
            except TelegramForbiddenError:
                logger.warning(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={callback_query.from_user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç"
                )
                delete_pending_registration(callback_query.from_user.id)
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={callback_query.from_user.id} —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã pending_registrations"
                )
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=messages["admin_blocked_notification"].format(
                            name=name,
                            username=username,
                            user_id=callback_query.from_user.id,
                        ),
                    )
                    logger.info(
                        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}) –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                    )
                except Exception as admin_e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_e}"
                    )
            except TelegramBadRequest as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é user_id={callback_query.from_user.id}: {e}"
                )
                await callback_query.answer(messages["sponsor_message"])
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É (admin_id={admin_id})"
            )
            participant_count = get_participant_count()
            logger.info(f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participant_count}")
            delete_pending_registration(callback_query.from_user.id)
        else:
            logger.error(
                f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è user_id={callback_query.from_user.id}"
            )
            await callback_query.message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        await state.clear()

    @dp.callback_query(F.data.in_(["confirm_participation", "decline_participation"]))
    async def process_participation_response(callback_query, state: FSMContext):
        logger.info(
            f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –æ—Ç user_id={callback_query.from_user.id}"
        )
        participant = get_participant_by_user_id(callback_query.from_user.id)
        if not participant:
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={callback_query.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ participants"
            )
            await callback_query.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            await callback_query.answer()
            try:
                await callback_query.message.delete()
                logger.info(
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è user_id={callback_query.from_user.id}"
                )
            except TelegramBadRequest as e:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={callback_query.from_user.id}: {e}"
                )
            return
        name = participant[2]
        role = participant[4]
        payment_status = participant[6]
        username = callback_query.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        if callback_query.data == "confirm_participation":
            if role == "volunteer":
                await callback_query.message.answer(
                    messages.get(
                        "volunteer_confirm_message",
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞!",
                    )
                )
                logger.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} (user_id={callback_query.from_user.id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä"
                )
                admin_message = messages.get(
                    "admin_volunteer_confirm_notification",
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} (@{username}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä.",
                ).format(name=name, username=username)
            else:
                if payment_status == "paid":
                    await callback_query.message.answer(
                        messages["confirm_paid_message"]
                    )
                    logger.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} (user_id={callback_query.from_user.id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ, –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
                    )
                    admin_message = messages["admin_confirm_notification"].format(
                        name=name, username=username, payment_status="–æ–ø–ª–∞—á–µ–Ω–æ"
                    )
                else:
                    await callback_query.message.answer(
                        messages["confirm_pending_message"]
                    )
                    logger.info(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} (user_id={callback_query.from_user.id}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ, –Ω–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
                    )
                    admin_message = messages["admin_confirm_notification"].format(
                        name=name, username=username, payment_status="–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ"
                    )
            try:
                await bot.send_message(chat_id=admin_id, text=admin_message)
                logger.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                )
            except TelegramBadRequest as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}): {e}"
                )
        elif callback_query.data == "decline_participation":
            await callback_query.message.answer(messages["decline_message"])
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} (user_id={callback_query.from_user.id}) –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —É—á–∞—Å—Ç–∏—è"
            )
            admin_message = messages["admin_decline_notification"].format(name=name)
            try:
                await bot.send_message(chat_id=admin_id, text=admin_message)
                logger.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                )
            except TelegramBadRequest as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (admin_id={admin_id}): {e}"
                )
        try:
            await callback_query.message.delete()
            logger.info(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è user_id={callback_query.from_user.id}"
            )
        except TelegramBadRequest as e:
            logger.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id={callback_query.from_user.id}: {e}"
            )
        await callback_query.answer()
        await state.clear()

    @dp.callback_query(F.data == "category_participants")
    async def show_participants_category(callback_query: CallbackQuery):
        await callback_query.message.delete()
        await callback_query.message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:",
            reply_markup=create_participants_category_keyboard(),
        )
        await callback_query.answer()

    @dp.callback_query(F.data == "category_race")
    async def show_race_category(callback_query: CallbackQuery):
        await callback_query.message.delete()
        await callback_query.message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–æ–π:", reply_markup=create_race_category_keyboard()
        )
        await callback_query.answer()

    @dp.callback_query(F.data == "category_notifications")
    async def show_notifications_category(callback_query: CallbackQuery):
        await callback_query.message.delete()
        await callback_query.message.answer(
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:",
            reply_markup=create_notifications_category_keyboard(),
        )
        await callback_query.answer()

    @dp.callback_query(F.data == "main_menu")
    async def show_main_menu(callback_query: CallbackQuery):
        await callback_query.message.delete()
        await callback_query.message.answer(
            messages["admin_commands"], reply_markup=create_admin_commands_keyboard()
        )
        await callback_query.answer()
