"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
"""

import os
from urllib.parse import quote
from aiogram import Dispatcher, Bot, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from logging_config import get_logger
from database import (
    create_slot_transfer_request,
    get_slot_transfer_by_code,
    register_new_user_for_transfer,
    approve_slot_transfer,
    reject_slot_transfer,
    get_pending_slot_transfers,
    cancel_slot_transfer_request,
    get_participant_by_user_id,
)

logger = get_logger(__name__)


class SlotTransferForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
    waiting_for_confirmation = State()


async def handle_slot_transfer_request(callback: CallbackQuery, bot: Bot, admin_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞"""
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    participant = get_participant_by_user_id(user_id)
    if not participant:
        await callback.message.edit_text(
            "‚ùå –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–∏—Ç—å —Å–ª–æ—Ç."
        )
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–∏—Ç—å",
                    callback_data="confirm_slot_transfer"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_slot_transfer_request"
                ),
            ]
        ]
    )

    await callback.message.edit_text(
        "üîÑ <b>–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞</b>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É.\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=confirm_keyboard
    )
    await callback.answer()


async def handle_confirm_slot_transfer(callback: CallbackQuery, bot: Bot, admin_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""
    user_id = callback.from_user.id
    username = callback.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    from database import get_slot_transfer_by_code
    import sqlite3

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        from database import DB_PATH
        with sqlite3.connect(DB_PATH, timeout=10) as conn:
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT id, referral_code, status FROM slot_transfers
                WHERE original_user_id = ? AND status IN ('pending', 'awaiting_approval')
                """,
                (user_id,)
            )
            existing_request = cursor.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        existing_request = None

    if existing_request:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        request_id, ref_code, status = existing_request

        status_text = "–æ–∂–∏–¥–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞" if status == "pending" else "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º
        choice_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üóë –û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å",
                        callback_data=f"cancel_old_transfer_{request_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
                        callback_data="keep_old_transfer"
                    )
                ]
            ]
        )

        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ!</b>\n\n"
            f"üîë <b>–ö–æ–¥:</b> <code>{ref_code}</code>\n"
            f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?",
            reply_markup=choice_keyboard
        )
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    result = create_slot_transfer_request(user_id)

    if result["success"]:
        referral_code = result["referral_code"]
        user_name = result["user_name"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        bot_info = await bot.get_me()
        bot_username = bot_info.username

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_link = f"https://t.me/{bot_username}?start={referral_code}"

        # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        share_text = "–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥–∞—é —Ç–µ–±–µ —Å–ª–æ—Ç –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ü–∏–≤–Ω–æ–º –ö–≤–∞—Ä—Ç–∞–ª–µ. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è URL
        full_message = f"{share_text}\n{referral_link}"
        encoded_message = quote(full_message, safe='')

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
        share_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                        url=f"https://t.me/share/url?url={encoded_message}"
                    )
                ]
            ]
        )

        await callback.message.edit_text(
            f"‚úÖ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{referral_link}</code>\n\n"
            f"üì± <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
            f"<i>{share_text}</i>\n"
            f"<code>{referral_link}</code>\n\n"
            f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n\n"
            f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏</i>",
            reply_markup=share_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            admin_message = (
                f"üîÑ <b>–°–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞</b>\n\n"
                f"üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {user_name} (@{username})\n"
                f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                f"üîë <b>–ö–æ–¥ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:</b> <code>{referral_code}</code>\n\n"
                f"‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."
            )
            await bot.send_message(admin_id, admin_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {e}")

    else:
        error_message = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n{error_message}"
        )

    await callback.answer()


async def handle_cancel_slot_transfer_request(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"""
    await callback.message.edit_text(
        "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "–í—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    await callback.answer()


async def handle_cancel_old_transfer(callback: CallbackQuery, bot: Bot, admin_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ"""
    user_id = callback.from_user.id
    username = callback.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –ò–∑–≤–ª–µ–∫–∞–µ–º request_id –∏–∑ callback_data
    request_id = int(callback.data.split("_")[3])

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å
    import sqlite3
    from database import DB_PATH

    try:
        with sqlite3.connect(DB_PATH, timeout=10) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM slot_transfers WHERE id = ?", (request_id,))
            conn.commit()
            logger.info(f"–°—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ (ID: {request_id}) –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    result = create_slot_transfer_request(user_id)

    if result["success"]:
        referral_code = result["referral_code"]
        user_name = result["user_name"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        bot_info = await bot.get_me()
        bot_username = bot_info.username

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_link = f"https://t.me/{bot_username}?start={referral_code}"

        # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
        share_text = "–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ–¥–∞—é —Ç–µ–±–µ —Å–ª–æ—Ç –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ü–∏–≤–Ω–æ–º –ö–≤–∞—Ä—Ç–∞–ª–µ. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ:"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è URL
        full_message = f"{share_text}\n{referral_link}"
        from urllib.parse import quote
        encoded_message = quote(full_message, safe='')

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
        share_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",
                        url=f"https://t.me/share/url?url={encoded_message}"
                    )
                ]
            ]
        )

        await callback.message.edit_text(
            f"‚úÖ <b>–ù–æ–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
            f"<code>{referral_link}</code>\n\n"
            f"üì± <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
            f"<i>{share_text}</i>\n"
            f"<code>{referral_link}</code>\n\n"
            f"–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.\n\n"
            f"üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏</i>",
            reply_markup=share_keyboard
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            admin_message = (
                f"üîÑ <b>–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞</b>\n"
                f"<i>(—Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)</i>\n\n"
                f"üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {user_name} (@{username})\n"
                f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                f"üîë <b>–ö–æ–¥ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:</b> <code>{referral_code}</code>\n\n"
                f"‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."
            )
            await bot.send_message(admin_id, admin_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {e}")

    else:
        error_message = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞</b>\n\n{error_message}"
        )

    await callback.answer()


async def handle_keep_old_transfer(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–º–µ–Ω—ã —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    await callback.message.edit_text(
        "‚úÖ <b>–û—Å—Ç–∞–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å</b>\n\n"
        "–í–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–∏–ª–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    await callback.answer()


async def handle_referral_start(message: Message, referral_code: str, bot: Bot, admin_id: int, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    participant = get_participant_by_user_id(user_id)
    if participant:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫.\n"
            "–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
    transfer_data = get_slot_transfer_by_code(referral_code)

    if not transfer_data:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫."
        )
        return

    (transfer_id, original_user_id, original_username, original_name,
     new_user_id, new_username, new_name, ref_code, request_date, status) = transfer_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    if status != "pending":
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id == original_user_id:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–∏—Ç—å —Å–ª–æ—Ç –Ω–∞ —Å–µ–±—è."
        )
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    await message.answer(
        f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"üîÑ –í—ã –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ <b>{original_name}</b>.\n\n"
        f"üìù <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:</b>"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º transfer_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(transfer_id=transfer_id, original_name=original_name)
    await state.set_state(SlotTransferForm.waiting_for_confirmation)


async def handle_new_participant_name(message: Message, state: FSMContext, bot: Bot, admin_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    new_name = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if len(new_name) < 2 or len(new_name) > 50:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    transfer_id = user_data.get("transfer_id")
    original_name = user_data.get("original_name")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    success = register_new_user_for_transfer(transfer_id, user_id, username, new_name)

    if success:
        await message.answer(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìã <b>–í–∞—à–µ –∏–º—è:</b> {new_name}\n\n"
            f"‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ <b>{original_name}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
            from database import get_participant_by_user_id

            original_participant = get_participant_by_user_id(
                get_slot_transfer_by_code(
                    get_pending_slot_transfers()[0][7] if get_pending_slot_transfers() else ""
                )[1] if get_pending_slot_transfers() else 0
            )

            admin_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                            callback_data=f"approve_transfer_{transfer_id}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            callback_data=f"reject_transfer_{transfer_id}"
                        ),
                    ]
                ]
            )

            admin_message = (
                f"üîÑ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞</b>\n\n"
                f"üë§ <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:</b> {original_name}\n"
                f"üë§ <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:</b> {new_name} (@{username})\n"
                f"üÜî <b>ID –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞:</b> <code>{user_id}</code>\n\n"
                f"‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?</b>"
            )

            await bot.send_message(admin_id, admin_message, reply_markup=admin_keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ: {e}")

    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

    await state.clear()


async def handle_admin_approve_transfer(callback: CallbackQuery, bot: Bot, admin_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º transfer_id –∏–∑ callback_data
    transfer_id = int(callback.data.split("_")[2])

    result = approve_slot_transfer(transfer_id)

    if result["success"]:
        original_user_id = result["original_user_id"]
        original_name = result["original_name"]
        new_user_id = result["new_user_id"]
        new_name = result["new_name"]
        role = result["role"]

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
            f"üë§ <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:</b> {original_name} (ID: {original_user_id})\n"
            f"üë§ <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:</b> {new_name} (ID: {new_user_id})\n"
            f"üé≠ <b>–†–æ–ª—å:</b> {role}\n\n"
            f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω, –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        try:
            await bot.send_message(
                original_user_id,
                f"‚úÖ <b>–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
                f"–í–∞—à —Å–ª–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ <b>{new_name}</b>.\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        try:
            await bot.send_message(
                new_user_id,
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω—è–ª–∏ —Å–ª–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ <b>{original_name}</b>.\n\n"
                f"üí∞ <b>–í–∞–∂–Ω–æ:</b> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É —É—á–∞—Å—Ç–∏—è!\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

    else:
        error_message = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</b>\n\n{error_message}"
        )

    await callback.answer()


async def handle_admin_reject_transfer(callback: CallbackQuery, bot: Bot, admin_id: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º transfer_id –∏–∑ callback_data
    transfer_id = int(callback.data.split("_")[2])

    result = reject_slot_transfer(transfer_id)

    if result["success"]:
        original_user_id = result["original_user_id"]
        original_name = result["original_name"]
        new_user_id = result["new_user_id"]
        new_name = result["new_name"]

        await callback.message.edit_text(
            f"‚ùå <b>–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ!</b>\n\n"
            f"üë§ <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:</b> {original_name} (ID: {original_user_id})\n"
            f"üë§ <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:</b> {new_name} (ID: {new_user_id})\n\n"
            f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        try:
            await bot.send_message(
                original_user_id,
                f"‚ùå <b>–ü–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
                f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"–í—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        try:
            await bot.send_message(
                new_user_id,
                f"‚ùå <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")

    else:
        error_message = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</b>\n\n{error_message}"
        )

    await callback.answer()


def register_slot_transfer_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞"""

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
    async def slot_transfer_request_wrapper(callback: CallbackQuery):
        await handle_slot_transfer_request(callback, bot, admin_id)

    dp.callback_query.register(
        slot_transfer_request_wrapper,
        F.data == "slot_transfer"
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    async def confirm_slot_transfer_wrapper(callback: CallbackQuery):
        await handle_confirm_slot_transfer(callback, bot, admin_id)

    dp.callback_query.register(
        confirm_slot_transfer_wrapper,
        F.data == "confirm_slot_transfer"
    )

    # –û—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    dp.callback_query.register(
        handle_cancel_slot_transfer_request,
        F.data == "cancel_slot_transfer_request"
    )

    # –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
    async def cancel_old_transfer_wrapper(callback: CallbackQuery):
        await handle_cancel_old_transfer(callback, bot, admin_id)

    dp.callback_query.register(
        cancel_old_transfer_wrapper,
        F.data.startswith("cancel_old_transfer_")
    )

    # –û—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∑–∞–ø—Ä–æ—Å
    dp.callback_query.register(
        handle_keep_old_transfer,
        F.data == "keep_old_transfer"
    )

    # –í–≤–æ–¥ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    async def new_participant_name_wrapper(message: Message, state: FSMContext):
        await handle_new_participant_name(message, state, bot, admin_id)

    dp.message.register(
        new_participant_name_wrapper,
        SlotTransferForm.waiting_for_confirmation
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    async def admin_approve_wrapper(callback: CallbackQuery):
        await handle_admin_approve_transfer(callback, bot, admin_id)

    dp.callback_query.register(
        admin_approve_wrapper,
        F.data.startswith("approve_transfer_")
    )

    # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    async def admin_reject_wrapper(callback: CallbackQuery):
        await handle_admin_reject_transfer(callback, bot, admin_id)

    dp.callback_query.register(
        admin_reject_wrapper,
        F.data.startswith("reject_transfer_")
    )

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
