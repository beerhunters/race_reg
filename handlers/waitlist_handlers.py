"""
Waitlist system handlers for the beer mile registration bot.
Handles automatic notifications when slots become available.
"""

from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from .utils import logger, messages, create_register_keyboard, get_participation_fee_text
from database import (
    get_waitlist_by_role,
    get_waitlist_position,
    remove_from_waitlist,
    notify_waitlist_users,
    confirm_waitlist_participation,
    decline_waitlist_participation,
    is_user_in_waitlist,
    delete_participant,
    delete_pending_registration,
    get_participant_count_by_role,
    get_setting,
)


def create_waitlist_keyboard():
    """Create keyboard for waitlist management"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Å—Ç–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏", callback_data="stay_in_waitlist"),
                InlineKeyboardButton(text="‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="leave_waitlist"),
            ],
        ]
    )
    return keyboard


def create_participation_confirmation_keyboard():
    """Create keyboard for participation confirmation"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É—á–∞—Å—Ç–≤—É—é!", callback_data="confirm_participation"),
                InlineKeyboardButton(text="‚ùå –ù–µ –º–æ–≥—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="decline_participation"),
            ],
        ]
    )
    return keyboard


async def handle_waitlist_status_command(message: Message):
    """Handle /waitlist_status command - show availability or user status"""
    user_id = message.from_user.id
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
    from database import get_participant_by_user_id, get_participant_count_by_role, get_setting
    participant = get_participant_by_user_id(user_id)
    
    if participant:
        name = participant[2]
        payment_status = participant[6]
        payment_emoji = "‚úÖ" if payment_status == "paid" else "‚è≥"
        payment_text = "–æ–ø–ª–∞—á–µ–Ω–æ" if payment_status == "paid" else "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        
        await message.answer(
            f"‚úÖ <b>–í—ã —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!</b>\n\n"
            f"üìù –ò–º—è: {name}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_emoji} {payment_text}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
    max_runners = get_setting("max_runners")
    current_runners = get_participant_count_by_role("runner")
    available_slots = max_runners - current_runners if max_runners else 0
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    if is_user_in_waitlist(user_id):
        position, total_waiting = get_waitlist_position(user_id)
        
        if position is None:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—á–µ—Ä–µ–¥–∏.")
            return
        
        # Get waitlist data to determine role
        waitlist_data = get_waitlist_by_role()
        user_data = None
        for entry in waitlist_data:
            if entry[1] == user_id:  # user_id is at index 1
                user_data = entry
                break
        
        if not user_data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è.")
            return
        
        role = user_data[5]  # role is at index 5
        role_display = "–±–µ–≥—É–Ω–æ–≤" if role == "runner" else "–≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤"
        
        text = (
            f"üìä <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è:</b>\n\n"
            f"üî¢ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {position} –∏–∑ {total_waiting}\n"
            f"üë• <b>–†–æ–ª—å:</b> {role_display}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b> {user_data[7][:10]}\n\n"  # join_date at index 7
            f"üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ!"
        )
        
        await message.answer(text, reply_markup=create_waitlist_keyboard())
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if available_slots > 0:
        await message.answer(
            f"üéâ <b>–ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞!</b>\n\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç: {available_slots} –∏–∑ {max_runners}\n"
            f"üìã –í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {len(get_waitlist_by_role('runner'))}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!"
        )
    else:
        waitlist_count = len(get_waitlist_by_role('runner'))
        await message.answer(
            f"‚è≥ <b>–í—Å–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã</b>\n\n"
            f"üìä –ó–∞–Ω—è—Ç–æ –º–µ—Å—Ç: {current_runners} –∏–∑ {max_runners}\n"
            f"üìã –í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {waitlist_count}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è!"
        )


async def handle_waitlist_callback(callback: CallbackQuery, bot: Bot, admin_id: int):
    """Handle waitlist management callbacks"""
    user_id = callback.from_user.id
    
    if callback.data == "stay_in_waitlist":
        await callback.message.edit_text(
            "‚úÖ –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è. –£–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–æ!"
        )
    
    elif callback.data == "leave_waitlist":
        success = remove_from_waitlist(user_id)
        
        if success:
            await callback.message.edit_text(
                "‚ùå –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è. "
                "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
            )
            
            # Notify admin
            try:
                username = callback.from_user.username or "–Ω–µ—Ç"
                await bot.send_message(
                    admin_id,
                    f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: <code>{user_id}</code>) –ø–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    await callback.answer()


async def handle_participation_confirmation(callback: CallbackQuery, bot: Bot, admin_id: int):
    """Handle participation confirmation from waitlist"""
    user_id = callback.from_user.id
    
    if callback.data == "confirm_participation":
        success = confirm_waitlist_participation(user_id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</b>\n\n"
                "–í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
                f"üí∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É —É—á–∞—Å—Ç–∏—è {get_participation_fee_text()}!\n\n"
                "üì± –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
            )
            
            # Notify admin about confirmation
            try:
                # Get user data from database to send notification
                from database import get_participant_by_user_id
                participant = get_participant_by_user_id(user_id)
                
                if participant:
                    name = participant[2]
                    target_time = participant[3]
                    username = callback.from_user.username or "–Ω–µ—Ç"
                    
                    admin_text = (
                        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è</b>\n\n"
                        f"üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {name}\n"
                        f"‚è∞ <b>–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è:</b> {target_time}\n"
                        f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                        f"üì± <b>Username:</b> @{username}\n\n"
                        f"üí∞ <b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                    )
                    
                    await bot.send_message(admin_id, admin_text)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}")
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É—á–∞—Å—Ç–∏—è. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º."
            )
    
    elif callback.data == "decline_participation":
        success = decline_waitlist_participation(user_id)
        
        if success:
            await callback.message.edit_text(
                "‚ùå <b>–£—á–∞—Å—Ç–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
                "–í—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è. "
                "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Å—Ç–æ."
            )
            
            # Check if we can notify next person in queue
            try:
                await check_and_process_waitlist(bot, admin_id, "runner")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    await callback.answer()


async def handle_admin_waitlist_command(message: Message):
    """Handle /waitlist command (admin only)"""
    waitlist_data = get_waitlist_by_role()
    
    if not waitlist_data:
        await message.answer("‚úÖ –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Å—Ç–∞.")
        return
    
    text = "üìã <b>–û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è:</b>\n\n"
    
    runners = []
    volunteers = []
    
    for entry in waitlist_data:
        _, user_id, username, name, target_time, role, gender, join_date, _ = entry
        entry_text = (
            f"‚Ä¢ <b>{name}</b> (@{username or '–Ω–µ—Ç'})\n"
            f"  ID: <code>{user_id}</code>\n"
            f"  –í—Ä–µ–º—è: {target_time or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"  –î–∞—Ç–∞: {join_date[:10]}\n"
        )
        
        if role == "runner":
            runners.append(entry_text)
        else:
            volunteers.append(entry_text)
    
    if runners:
        text += f"üèÉ <b>–ë–µ–≥—É–Ω—ã ({len(runners)}):</b>\n"
        text += "\n".join(f"{i+1}. {entry}" for i, entry in enumerate(runners))
        text += "\n\n"
    
    if volunteers:
        text += f"üôå <b>–í–æ–ª–æ–Ω—Ç—ë—Ä—ã ({len(volunteers)}):</b>\n"
        text += "\n".join(f"{i+1}. {entry}" for i, entry in enumerate(volunteers))
    
    # Split message if too long
    if len(text) > 4000:
        chunks = []
        current_chunk = "üìã <b>–û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è:</b>\n\n"
        
        for line in text.split('\n\n')[1:]:  # Skip header
            if len(current_chunk + line + '\n\n') > 4000:
                chunks.append(current_chunk.rstrip())
                current_chunk = line + '\n\n'
            else:
                current_chunk += line + '\n\n'
        
        if current_chunk.strip():
            chunks.append(current_chunk.rstrip())
        
        for chunk in chunks:
            await message.answer(chunk)
    else:
        await message.answer(text)


async def notify_waitlist_availability(bot: Bot, notified_users: list):
    """Notify users about available slots with confirmation request"""
    for user_data in notified_users:
        user_id, username, name, target_time, role, gender = user_data
        
        role_display = "–±–µ–≥—É–Ω–∞" if role == "runner" else "–≤–æ–ª–æ–Ω—Ç—ë—Ä–∞"
        text = (
            f"üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b>\n\n"
            f"–î–ª—è –≤–∞—Å –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ –≤ —Ä–æ–ª–∏ {role_display}!\n\n"
            f"üìù <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n"
            f"‚Ä¢ –ò–º—è: {name}\n"
            f"‚Ä¢ –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {target_time or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"‚Ä¢ –†–æ–ª—å: {role_display}\n\n"
            f"‚è∞ <b>–£ –≤–∞—Å –µ—Å—Ç—å 24 —á–∞—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è!</b>\n\n"
        )
        
        if role == "runner":
            text += f"üí∞ –ü—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É —É—á–∞—Å—Ç–∏—è {get_participation_fee_text()}."
        
        try:
            await bot.send_message(
                user_id, 
                text,
                reply_markup=create_participation_confirmation_keyboard()
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –º–µ—Å—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except TelegramForbiddenError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç, —É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
            remove_from_waitlist(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def check_and_process_waitlist(bot: Bot, admin_id: int, role: str):
    """Check if there are available slots and notify waitlist users"""
    max_count = get_setting(f"max_{role}s")  # max_runners or max_volunteers
    current_count = get_participant_count_by_role(role)
    
    if max_count is None:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ max_{role}s")
        return
    
    available_slots = max_count - current_count
    
    if available_slots > 0:
        notified_users = notify_waitlist_users(role, available_slots)
        
        if notified_users:
            await notify_waitlist_availability(bot, notified_users)
            
            # Notify admin
            role_display = "–±–µ–≥—É–Ω–æ–≤" if role == "runner" else "–≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤"
            admin_text = (
                f"üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è</b>\n\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è {role_display}: {len(notified_users)}\n"
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: 24 —á–∞—Å–∞\n\n"
            )
            
            for user_data in notified_users:
                _, username, name, _, _, _ = user_data
                admin_text += f"‚Ä¢ {name} (@{username or '–Ω–µ—Ç'})\n"
            
            try:
                await bot.send_message(admin_id, admin_text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


def register_waitlist_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    """Register waitlist handlers"""
    
    # User commands
    dp.message.register(
        handle_waitlist_status_command,
        Command("waitlist_status")
    )
    
    # Admin commands  
    dp.message.register(
        handle_admin_waitlist_command,
        Command("waitlist"),
        F.from_user.id == admin_id
    )
    
    # Callbacks
    async def waitlist_callback_wrapper(callback: CallbackQuery):
        await handle_waitlist_callback(callback, bot, admin_id)
    
    async def participation_callback_wrapper(callback: CallbackQuery):
        await handle_participation_confirmation(callback, bot, admin_id)
    
    dp.callback_query.register(
        waitlist_callback_wrapper,
        F.data.in_(["stay_in_waitlist", "leave_waitlist"])
    )
    
    # Participation confirmation callbacks
    dp.callback_query.register(
        participation_callback_wrapper,
        F.data.in_(["confirm_participation", "decline_participation"])
    )
    
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")