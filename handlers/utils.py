import json
import logging.handlers
import os
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


class CustomRotatingFileHandler(logging.handlers.BaseRotatingHandler):
    def __init__(self, filename, maxBytes, encoding=None):
        super().__init__(filename, mode="a", encoding=encoding)
        self.maxBytes = maxBytes
        self.backup_file = f"{filename}.1"

    def shouldRollover(self, record):
        if (
            os.path.exists(self.baseFilename)
            and os.path.getsize(self.baseFilename) > self.maxBytes
        ):
            return True
        return False

    def doRollover(self):
        if self.stream:
            self.stream.close()
            self.stream = None
        if os.path.exists(self.baseFilename):
            if os.path.exists(self.backup_file):
                os.remove(self.backup_file)
            os.rename(self.baseFilename, self.backup_file)
        self.stream = self._open()


os.makedirs("/app/logs", exist_ok=True)
log_level = {
    "DEBUG": logging.DEBUG,
    "INFO": logging.INFO,
    "WARNING": logging.WARNING,
    "ERROR": logging.ERROR,
    "CRITICAL": logging.CRITICAL,
}
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        CustomRotatingFileHandler("/app/logs/bot.log", maxBytes=10 * 1024 * 1024),
    ],
)
logger = logging.getLogger(__name__)

try:
    with open("messages.json", "r", encoding="utf-8") as f:
        messages = json.load(f)
    logger.info("–§–∞–π–ª messages.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
except FileNotFoundError:
    logger.error("–§–∞–π–ª messages.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    raise
except json.JSONDecodeError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ messages.json: {e}")
    raise

try:
    with open("config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
    logger.info("–§–∞–π–ª config.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
except FileNotFoundError:
    logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
    raise
except json.JSONDecodeError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ config.json: {e}")
    raise

if config.get("log_level") not in log_level:
    logger.error(
        f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ log_level: {config.get('log_level')}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ERROR."
    )
    logging.getLogger().setLevel(logging.ERROR)
else:
    logging.getLogger().setLevel(log_level[config["log_level"]])
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config['log_level']}")


class RegistrationForm(StatesGroup):
    waiting_for_name = State()
    waiting_for_role = State()
    waiting_for_target_time = State()
    waiting_for_gender = State()
    waiting_for_info_message = State()
    waiting_for_afisha_image = State()
    waiting_for_sponsor_image = State()
    waiting_for_notify_unpaid_message = State()
    waiting_for_reg_end_date = State()
    waiting_for_price = State()
    waiting_for_paid_id = State()
    waiting_for_bib = State()
    waiting_for_remove_id = State()
    waiting_for_runners = State()
    waiting_for_result = State()
    waiting_for_race_date = State()
    waiting_for_protocol_type = State()
    waiting_for_gender_protocol = State()
    waiting_for_notify_all_interacted_message = State()
    waiting_for_notify_all_interacted_photo = State()
    
    # Participant notification states
    waiting_for_notify_participants_message = State()
    
    # Advanced notification states
    waiting_for_notify_audience_selection = State()
    waiting_for_notify_advanced_message = State()
    waiting_for_notify_advanced_photo = State()
    
    # Results recording states
    waiting_for_results_start = State()
    waiting_for_participant_result = State()
    waiting_for_results_send_confirmation = State()
    
    # Profile editing states
    waiting_for_edit_field_selection = State()
    waiting_for_new_name = State()
    waiting_for_new_target_time = State()
    waiting_for_new_gender = State()
    waiting_for_edit_confirmation = State()
    
    # Archive states
    waiting_for_archive_date = State()
    
    # Cluster and category states
    waiting_for_category_assignment = State()
    waiting_for_cluster_assignment = State()
    
    # Sequential bib assignment states
    waiting_for_bib_assignment = State()
    
    processed = State()


def create_role_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=messages["role_runner"], callback_data="role_runner"
                )
            ],
            [
                InlineKeyboardButton(
                    text=messages["role_volunteer"], callback_data="role_volunteer"
                )
            ],
        ]
    )
    return keyboard


def create_register_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=messages["register_button"], callback_data="start_registration"
                )
            ]
        ]
    )
    return keyboard


def create_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=messages["confirm_button"],
                    callback_data="confirm_participation",
                ),
                InlineKeyboardButton(
                    text=messages["decline_button"],
                    callback_data="decline_participation",
                ),
            ]
        ]
    )
    return keyboard


def create_gender_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=messages["gender_male"], callback_data="male"
                ),
                InlineKeyboardButton(
                    text=messages["gender_female"], callback_data="female"
                ),
            ],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    return keyboard


def create_protocol_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=messages["protocol_all_button"], callback_data="protocol_all"
                ),
                InlineKeyboardButton(
                    text=messages["protocol_by_gender_button"],
                    callback_data="protocol_by_gender",
                ),
            ],
            [
                InlineKeyboardButton(
                    text="üèÜ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="protocol_by_category"
                ),
                InlineKeyboardButton(
                    text="üéØ –ü–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º", callback_data="protocol_by_cluster"
                ),
            ],
        ]
    )
    return keyboard


def create_edit_profile_keyboard():
    """Create keyboard for profile editing field selection"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –ò–º—è", callback_data="edit_name"),
                InlineKeyboardButton(text="‚è∞ –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è", callback_data="edit_target_time"),
            ],
            [
                InlineKeyboardButton(text="üë§ –ü–æ–ª", callback_data="edit_gender"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"),
            ],
        ]
    )
    return keyboard


def create_admin_edit_approval_keyboard(request_id: int):
    """Create keyboard for admin to approve/reject edit requests"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_edit_{request_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_edit_{request_id}"),
            ],
        ]
    )
    return keyboard


def create_edit_confirmation_keyboard():
    """Create keyboard for user to confirm their edit request"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_edit"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"),
            ],
        ]
    )
    return keyboard


def create_admin_commands_keyboard():
    """Create admin commands keyboard"""
    commands = [
        InlineKeyboardButton(
            text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="category_participants"
        ),
        InlineKeyboardButton(
            text="üèÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–æ–π", callback_data="category_race"
        ),
        InlineKeyboardButton(
            text="üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="category_notifications"
        ),
        InlineKeyboardButton(
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="category_settings"
        ),
        InlineKeyboardButton(
            text="üé® –ú–µ–¥–∏–∞", callback_data="category_media"
        ),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[[cmd] for cmd in commands])


def create_participants_category_keyboard():
    """Create participants category keyboard"""
    commands = [
        InlineKeyboardButton(
            text="üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="admin_participants"
        ),
        InlineKeyboardButton(
            text="‚è≥ –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_pending"
        ),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="admin_paid"),
        InlineKeyboardButton(text="üî¢ –ü—Ä–∏—Å–≤–æ–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="admin_set_bib"),
        InlineKeyboardButton(text="üì¢ –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–º–µ—Ä–∞—Ö", callback_data="admin_notify_bibs"),
        InlineKeyboardButton(text="üèÉ –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="admin_results"),
        InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="admin_remove"
        ),
        InlineKeyboardButton(text="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data="admin_export"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[[cmd] for cmd in commands])


def create_race_category_keyboard():
    """Create race category keyboard"""
    commands = [
        InlineKeyboardButton(text="üèÜ –ü—Ä–æ—Ç–æ–∫–æ–ª", callback_data="admin_protocol"),
        InlineKeyboardButton(text="üìÇ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≥–æ–Ω–∫—É", callback_data="admin_archive_race"),
        InlineKeyboardButton(text="üìà –ü—Ä–æ—à–ª—ã–µ –≥–æ–Ω–∫–∏", callback_data="admin_past_races"),
        InlineKeyboardButton(text="üìã –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è", callback_data="admin_waitlist"),
        InlineKeyboardButton(text="üéØ –ö–ª–∞—Å—Ç–µ—Ä—ã", callback_data="admin_clusters"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[[cmd] for cmd in commands])


def create_notifications_category_keyboard():
    """Create notifications category keyboard"""
    commands = [
        InlineKeyboardButton(text="üì¢ –£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="admin_notify_participants"),
        InlineKeyboardButton(text="‚úèÔ∏è –£–≤–µ–¥–æ–º–∏—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º/—Ñ–æ—Ç–æ", callback_data="admin_notify_with_text"),
        InlineKeyboardButton(text="üí∞ –ù–∞–ø–æ–º–Ω–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ", callback_data="admin_notify_unpaid"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[[cmd] for cmd in commands])


def create_notify_audience_keyboard():
    """Create keyboard for selecting notification audience"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="audience_participants"),
                InlineKeyboardButton(text="‚è≥ Pending", callback_data="audience_pending"),
            ],
            [
                InlineKeyboardButton(text="üìã –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è", callback_data="audience_waitlist"),
                InlineKeyboardButton(text="üìÇ –ò–∑ –∞—Ä—Ö–∏–≤–æ–≤", callback_data="audience_archives"),
            ],
            [
                InlineKeyboardButton(text="üåç –í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="audience_all"),
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_notify"),
            ],
        ]
    )
    return keyboard


def create_settings_category_keyboard():
    """Create settings category keyboard"""
    commands = [
        InlineKeyboardButton(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="admin_edit_runners"),
        InlineKeyboardButton(text="üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="admin_set_reg_end_date"),
        InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —É—á–∞—Å—Ç–∏—è", callback_data="admin_set_price"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[[cmd] for cmd in commands])


def create_media_category_keyboard():
    """Create media category keyboard"""
    commands = [
        InlineKeyboardButton(text="‚ÑπÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_info"),
        InlineKeyboardButton(text="üñº –°–æ–∑–¥–∞—Ç—å –∞—Ñ–∏—à—É", callback_data="admin_create_afisha"),
        InlineKeyboardButton(text="ü§ù –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="admin_update_sponsor"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[[cmd] for cmd in commands])


def get_participation_fee_text():
    """Get formatted participation fee text from database"""
    try:
        from database import get_setting
        fee = get_setting("participation_price")
        
        if fee is None:
            # Fallback to config if not set in database
            fee = config.get("participation_fee", 500)
        
        if fee == 0:
            return "(–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
        else:
            return f"({fee} —Ä—É–±.)"
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ –ë–î: {e}")
        # Fallback to config
        fee = config.get("participation_fee", 500)
        currency = config.get("participation_fee_currency", "—Ä")
        return f"({fee}{currency})"


def create_clusters_category_keyboard():
    """Create clusters category keyboard"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_add_categories"),
                InlineKeyboardButton(text="üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã", callback_data="admin_assign_clusters"),
            ],
            [
                InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", callback_data="admin_view_distribution"),
            ],
            [
                InlineKeyboardButton(text="üì¢ –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏", callback_data="admin_notify_distribution"),
            ],
            [
                InlineKeyboardButton(text="üìÑ –°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="admin_create_document"),
                InlineKeyboardButton(text="üíæ –°–∫–∞—á–∞—Ç—å CSV", callback_data="admin_download_csv"),
            ],
            [
                InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="admin_clear_categories"),
                InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ã", callback_data="admin_clear_clusters"),
            ],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"),
            ],
        ]
    )
    return keyboard


def create_category_selection_keyboard():
    """Create keyboard for category selection"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="ü•á –≠–ª–∏—Ç–∞", callback_data="category_elite"),
                InlineKeyboardButton(text="üèÉ –ö–ª–∞—Å—Å–∏–∫–∞", callback_data="category_classic"),
            ],
            [
                InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="category_women"),
                InlineKeyboardButton(text="üë• –ö–æ–º–∞–Ω–¥–∞", callback_data="category_team"),
            ],
            [
                InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="category_skip"),
            ],
        ]
    )
    return keyboard


def create_cluster_selection_keyboard():
    """Create keyboard for cluster selection"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üÖ∞Ô∏è –ö–ª–∞—Å—Ç–µ—Ä A", callback_data="cluster_A"),
                InlineKeyboardButton(text="üÖ±Ô∏è –ö–ª–∞—Å—Ç–µ—Ä B", callback_data="cluster_B"),
                InlineKeyboardButton(text="üÖ≤ –ö–ª–∞—Å—Ç–µ—Ä C", callback_data="cluster_C"),
            ],
            [
                InlineKeyboardButton(text="üÖ≥ –ö–ª–∞—Å—Ç–µ—Ä D", callback_data="cluster_D"),
                InlineKeyboardButton(text="üÖ¥ –ö–ª–∞—Å—Ç–µ—Ä E", callback_data="cluster_E"),
            ],
            [
                InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="cluster_skip"),
            ],
        ]
    )
    return keyboard


def create_bib_assignment_keyboard():
    """Create keyboard for bib number assignment"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="bib_skip"),
            ],
        ]
    )
    return keyboard


def create_bib_notification_confirmation_keyboard():
    """Create keyboard for bib notification confirmation"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_bib_notify"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ", callback_data="cancel_bib_notify"),
            ],
        ]
    )
    return keyboard
