from datetime import datetime

from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from pytz import timezone

from .utils import logger, messages, RegistrationForm
from .validation import validate_participant_limit, sanitize_input
from database import (
    get_setting,
    set_setting,
    get_participant_count_by_role,
    get_pending_registrations,
    delete_pending_registration,
)


def register_settings_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    async def edit_runners(event: [Message, CallbackQuery], state: FSMContext):
        user_id = event.from_user.id
        if user_id != admin_id:
            await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç user_id={user_id}")
        
        if isinstance(event, CallbackQuery):
            await event.message.delete()
            message = event.message
            await event.answer()
        else:
            await event.delete()
            message = event
        
        # Get current stats
        current_runners = get_participant_count_by_role("runner")
        current_max = get_setting("max_runners")
        
        text = "üî¢ <b>–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n"
        text += f"üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"‚Ä¢ –õ–∏–º–∏—Ç –±–µ–≥—É–Ω–æ–≤: {current_max}\n"
        text += f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {current_runners}\n"
        text += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {current_max - current_runners}\n\n"
        
        # Check waitlist
        waitlist_data = []
        try:
            from database import get_waitlist_by_role
            waitlist_data = get_waitlist_by_role()
        except:
            pass
        
        if waitlist_data:
            text += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {len(waitlist_data)}\n\n"
        
        text += "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
        text += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {current_runners} (–Ω–µ –º–µ–Ω–µ–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)\n"
        text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∞–∫—Å–∏–º—É–º: 100\n"
        text += "‚Ä¢ –ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è"
        
        await message.answer(text)
        await state.set_state(RegistrationForm.waiting_for_runners)

    @dp.message(RegistrationForm.waiting_for_runners)
    async def process_edit_runners(message: Message, state: FSMContext):
        user_input = sanitize_input(message.text, 10)
        
        try:
            new_max_runners = int(user_input)
        except ValueError:
            await message.answer("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        
        current_runners = get_participant_count_by_role("runner")
        is_valid, error_message = validate_participant_limit(new_max_runners, current_runners)
        
        if not is_valid:
            await message.answer(f"‚ùå {error_message}")
            return
        
        old_max_runners = get_setting("max_runners")
        if old_max_runners is None:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ max_runners –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await message.answer("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        success = set_setting("max_runners", new_max_runners)
        if success:
            text = "‚úÖ <b>–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑–º–µ–Ω—ë–Ω</b>\n\n"
            text += f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n"
            text += f"‚Ä¢ –°—Ç–∞—Ä—ã–π –ª–∏–º–∏—Ç: {old_max_runners}\n"
            text += f"‚Ä¢ –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {new_max_runners}\n"
            text += f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {current_runners}\n"
            text += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {new_max_runners - current_runners}\n"
            
            if new_max_runners > old_max_runners:
                added_slots = new_max_runners - old_max_runners
                text += f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Å—Ç: +{added_slots}\n\n"
                text += "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è..."
                await message.answer(text)
                
                # Process waitlist for newly available slots
                try:
                    from .waitlist_handlers import check_and_process_waitlist
                    processed_count = await check_and_process_waitlist(bot, admin_id, "runner")
                    if processed_count > 0:
                        await message.answer(
                            f"‚úÖ –ò–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {processed_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                        )
                    else:
                        await message.answer("‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Å—Ç–∞ –∏–ª–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
                    await message.answer("‚ö†Ô∏è –õ–∏–º–∏—Ç –∏–∑–º–µ–Ω—ë–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è.")
            elif new_max_runners < old_max_runners:
                removed_slots = old_max_runners - new_max_runners
                text += f"‚Ä¢ –£–±—Ä–∞–Ω–æ –º–µ—Å—Ç: -{removed_slots}\n\n"
                text += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ."
                await message.answer(text)
            else:
                text += "\nüí° –õ–∏–º–∏—Ç –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º."
                await message.answer(text)
                
            logger.info(f"–õ–∏–º–∏—Ç –±–µ–≥—É–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω —Å {old_max_runners} –Ω–∞ {new_max_runners}")
                
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ max_runners")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
        await state.clear()

    @dp.message(Command("edit_runners"))
    async def cmd_edit_runners(message: Message, state: FSMContext):
        await edit_runners(message, state)

    @dp.callback_query(F.data == "admin_edit_runners")
    async def callback_edit_runners(callback_query: CallbackQuery, state: FSMContext):
        await edit_runners(callback_query, state)

    @dp.message(Command("set_reg_end_date"))
    @dp.callback_query(F.data == "admin_set_reg_end_date")
    async def set_reg_end_date(event: [Message, CallbackQuery], state: FSMContext):
        user_id = event.from_user.id
        if user_id != admin_id:
            await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç user_id={user_id}")
        
        if isinstance(event, CallbackQuery):
            await event.message.delete()
            message = event.message
            await event.answer()
        else:
            await event.delete()
            message = event
            
        # Get current end date
        current_end_date = get_setting("reg_end_date")
        
        text = "üìÖ <b>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n"
        
        if current_end_date:
            text += f"üìä –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_end_date}\n\n"
        else:
            text += "üìä –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\n"
            
        # Show current Moscow time
        moscow_tz = timezone("Europe/Moscow")
        current_time = datetime.now(moscow_tz)
        text += f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {current_time.strftime('%H:%M %d.%m.%Y')}\n\n"
        
        text += "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
        text += "‚Ä¢ –§–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
        text += "‚Ä¢ –ü—Ä–∏–º–µ—Ä: <code>23:59 31.12.2025</code>\n"
        text += "‚Ä¢ –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É\n"
        text += "‚Ä¢ –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
        
        await message.answer(text)
        await state.set_state(RegistrationForm.waiting_for_reg_end_date)

    @dp.message(RegistrationForm.waiting_for_reg_end_date)
    async def process_reg_end_date(message: Message, state: FSMContext):
        if message.from_user.id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return
            
        date_text = sanitize_input(message.text, 20).strip()
        
        try:
            # Parse the date
            end_date = datetime.strptime(date_text, "%H:%M %d.%m.%Y")
            moscow_tz = timezone("Europe/Moscow")
            end_date = moscow_tz.localize(end_date)
            current_time = datetime.now(moscow_tz)
            
            # Check if date is in the future
            if end_date <= current_time:
                time_diff = (current_time - end_date).total_seconds() / 60
                await message.answer(
                    f"‚ùå –£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ –Ω–∞ {int(time_diff)} –º–∏–Ω—É—Ç.\n\n"
                    f"–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time.strftime('%H:%M %d.%m.%Y')}"
                )
                return
            
            # Get old date for comparison
            old_date = get_setting("reg_end_date")
            
            # Save new date
            success = set_setting("reg_end_date", date_text)
            
            if success:
                text = "‚úÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                
                if old_date:
                    text += f"üìä –°—Ç–∞—Ä–∞—è –¥–∞—Ç–∞: {old_date}\n"
                
                text += f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: <b>{date_text}</b>\n"
                text += f"üïê –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (–ú–°–ö)\n\n"
                
                # Calculate time until deadline
                time_left = end_date - current_time
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                
                text += f"‚è∞ –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
                if days > 0:
                    text += f"‚Ä¢ {days} –¥–Ω–µ–π\n"
                if hours > 0 or days > 0:
                    text += f"‚Ä¢ {hours} —á–∞—Å–æ–≤\n"
                text += f"‚Ä¢ {minutes} –º–∏–Ω—É—Ç"
                
                await message.answer(text)
                logger.info(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date_text}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>23:59 31.12.2025</code>"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
        await state.clear()

    @dp.message(Command("set_price"))
    @dp.callback_query(F.data == "admin_set_price")
    async def set_participation_price(event: [Message, CallbackQuery], state: FSMContext):
        """Set participation price"""
        user_id = event.from_user.id
        if user_id != admin_id:
            await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —É—á–∞—Å—Ç–∏—è –æ—Ç user_id={user_id}")
        
        if isinstance(event, CallbackQuery):
            await event.message.delete()
            message = event.message
            await event.answer()
        else:
            await event.delete()
            message = event
        
        # Get current price
        current_price = get_setting("participation_price")
        if current_price is None:
            current_price = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        text = "üí∞ <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —É—á–∞—Å—Ç–∏—è</b>\n\n"
        text += f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}\n\n"
        text += "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —É—á–∞—Å—Ç–∏—è –≤ —Ä—É–±–ª—è—Ö:\n"
        text += "‚Ä¢ –¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)\n"
        text += "‚Ä¢ –ò–ª–∏ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è\n"
        text += "‚Ä¢ –¶–µ–Ω–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        await message.answer(text)
        await state.set_state(RegistrationForm.waiting_for_price)

    @dp.message(RegistrationForm.waiting_for_price)
    async def process_participation_price(message: Message, state: FSMContext):
        """Process new participation price"""
        if message.from_user.id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            await state.clear()
            return
        
        price_text = sanitize_input(message.text, 10).strip()
        
        try:
            new_price = int(price_text)
            if new_price < 0:
                await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                return
        except ValueError:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # Get old price for logging
        old_price = get_setting("participation_price")
        old_price_str = str(old_price) if old_price is not None else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        
        # Save new price
        success = set_setting("participation_price", new_price)
        
        if success:
            if new_price == 0:
                price_text = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"
            else:
                price_text = f"{new_price} —Ä—É–±."
            
            text = "‚úÖ <b>–¶–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n\n"
            text += f"üìä –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price_str}\n"
            text += f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {price_text}\n\n"
            text += "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∞—é—Ç –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π."
            
            await message.answer(text)
            logger.info(f"–¶–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ —Å '{old_price_str}' –Ω–∞ '{new_price}' —Ä—É–±.")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ participation_price")
        
        await state.clear()

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
