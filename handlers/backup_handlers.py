import os
import shutil
import sqlite3
import json
from datetime import datetime, timedelta
from aiogram import Dispatcher, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, BufferedInputFile
import pytz
import zipfile
import asyncio
import logging

from .utils import logger, RegistrationForm
from database import DB_PATH

# Global variable to store backup task
backup_task = None


def register_backup_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    @dp.callback_query(F.data == "admin_create_backup")
    async def create_manual_backup(callback_query: CallbackQuery):
        """Create manual backup"""
        user_id = callback_query.from_user.id
        if user_id != admin_id:
            await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await callback_query.answer()
        await callback_query.message.delete()

        status_message = await callback_query.message.answer(
            "üíæ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...</b>"
        )

        try:
            backup_file = await create_backup()
            if backup_file and os.path.exists(backup_file):
                # Send backup file to admin
                with open(backup_file, "rb") as f:
                    file_data = f.read()

                input_file = BufferedInputFile(file_data, os.path.basename(backup_file))

                moscow_tz = pytz.timezone("Europe/Moscow")
                current_time = datetime.now(moscow_tz)

                # Send file first without caption
                await bot.send_document(admin_id, input_file)

                # Then send info message
                caption = f"üíæ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞</b>\n\n"
                caption += f"üìÖ –î–∞—Ç–∞: {current_time.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n"
                caption += f"üìÅ –§–∞–π–ª: {os.path.basename(backup_file)}\n"
                caption += f"üìä –†–∞–∑–º–µ—Ä: {len(file_data) / 1024:.1f} –ö–ë\n\n"
                caption += "üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ"

                await bot.send_message(admin_id, caption)

                await status_message.edit_text(
                    "‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>"
                )

                # Clean up local backup file
                try:
                    os.remove(backup_file)
                except:
                    pass

            else:
                await status_message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä—É—á–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            await status_message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏."
            )

    @dp.callback_query(F.data == "admin_backup_settings")
    async def backup_settings(callback_query: CallbackQuery):
        """Show backup settings and status"""
        user_id = callback_query.from_user.id
        if user_id != admin_id:
            await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await callback_query.answer()

        # Check backup status
        backup_dir = "/app/backups"
        backup_files = []
        if os.path.exists(backup_dir):
            backup_files = [f for f in os.listdir(backup_dir) if f.endswith(".zip")]
            backup_files.sort(reverse=True)  # Latest first

        text = "üíæ <b>–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"

        # Automatic backup status
        global backup_task
        if backup_task and not backup_task.done():
            text += "üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã:</b> –ê–∫—Ç–∏–≤–Ω—ã\n"
            text += "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤\n"
        else:
            text += "‚ùå <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã:</b> –û—Ç–∫–ª—é—á–µ–Ω—ã\n"

        text += f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã—Ö –±–µ–∫–∞–ø–æ–≤: {len(backup_files)}\n\n"

        # Recent backups
        if backup_files:
            text += "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±–µ–∫–∞–ø—ã:</b>\n"
            for i, backup_file in enumerate(backup_files[:5]):  # Show last 5
                try:
                    # Extract timestamp from filename
                    timestamp_str = backup_file.replace("backup_", "").replace(
                        ".zip", ""
                    )
                    backup_time = datetime.strptime(timestamp_str, "%Y%m%d_%H%M%S")
                    formatted_time = backup_time.strftime("%d.%m.%Y %H:%M")
                    text += f"‚Ä¢ {formatted_time}\n"
                except:
                    text += f"‚Ä¢ {backup_file}\n"

            if len(backup_files) > 5:
                text += f"‚Ä¢ ... –∏ –µ—â—ë {len(backup_files) - 5}\n"
        else:
            text += "üìã <b>–ë–µ–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n"

        text += "\nüõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        text += "‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Ä—É—á–Ω—É—é\n"
        text += "‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–±–µ–∫–∞–ø—ã\n"
        text += "‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±–µ–∫–∞–ø—ã"

        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üíæ –°–æ–∑–¥–∞—Ç—å –±–µ–∫–∞–ø", callback_data="admin_create_backup"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ê–≤—Ç–æ–±–µ–∫–∞–ø—ã", callback_data="admin_toggle_auto_backup"
                    ),
                    InlineKeyboardButton(
                        text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", callback_data="admin_cleanup_backups"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="admin_restore_backup"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                    ),
                ],
            ]
        )

        await callback_query.message.edit_text(text, reply_markup=keyboard)

    @dp.callback_query(F.data == "admin_toggle_auto_backup")
    async def toggle_auto_backup(callback_query: CallbackQuery):
        """Toggle automatic backup system"""
        user_id = callback_query.from_user.id
        if user_id != admin_id:
            await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await callback_query.answer()

        global backup_task

        if backup_task and not backup_task.done():
            # Stop automatic backups
            backup_task.cancel()
            await callback_query.message.edit_text(
                "‚ùå <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
                "üí° –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∫–∞–ø–æ–≤."
            )
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        else:
            # Start automatic backups
            backup_task = asyncio.create_task(automatic_backup_scheduler(bot, admin_id))
            await callback_query.message.edit_text(
                "‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã</b>\n\n"
                "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤\n"
                "üì§ –ë–µ–∫–∞–ø—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            )
            logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã –∑–∞–ø—É—â–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

    @dp.callback_query(F.data == "admin_cleanup_backups")
    async def cleanup_old_backups(callback_query: CallbackQuery):
        """Clean up old backup files"""
        user_id = callback_query.from_user.id
        if user_id != admin_id:
            await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await callback_query.answer()

        try:
            backup_dir = "/app/backups"
            if not os.path.exists(backup_dir):
                await callback_query.message.answer("üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–µ–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # Get all backup files
            backup_files = [f for f in os.listdir(backup_dir) if f.endswith(".zip")]
            backup_files.sort()

            if len(backup_files) <= 10:  # Keep at least 10 backups
                await callback_query.message.answer(
                    f"üíæ <b>–û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è</b>\n\n"
                    f"–ù–∞–π–¥–µ–Ω–æ {len(backup_files)} –±–µ–∫–∞–ø–æ–≤ (‚â§ 10)"
                )
                return

            # Remove old backups, keep last 10
            files_to_remove = backup_files[:-10]
            removed_count = 0

            for file_name in files_to_remove:
                try:
                    os.remove(os.path.join(backup_dir, file_name))
                    removed_count += 1
                except:
                    pass

            await callback_query.message.edit_text(
                f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤: {removed_count}\n"
                f"‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö: {len(backup_files) - removed_count}\n\n"
                f"üí° –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–µ–∫–∞–ø–æ–≤"
            )

            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} —Å—Ç–∞—Ä—ã—Ö –±–µ–∫–∞–ø–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–µ–∫–∞–ø–æ–≤: {e}")
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–µ–∫–∞–ø–æ–≤")

    @dp.callback_query(F.data == "admin_restore_backup")
    async def restore_backup_menu(callback_query: CallbackQuery, state: FSMContext):
        """Show restore backup menu with file upload option"""
        user_id = callback_query.from_user.id
        if user_id != admin_id:
            await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        await callback_query.answer()

        text = "üì• <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
        text += "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n"
        text += "‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
        text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º\n"
        text += "‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞\n\n"
        text += "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-—Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="admin_backup_settings"
                    ),
                ]
            ]
        )

        await state.set_state(RegistrationForm.restore_backup)
        await callback_query.message.edit_text(text, reply_markup=keyboard)

    @dp.message(RegistrationForm.restore_backup)
    async def process_restore_backup(message: Message, state: FSMContext):
        """Process backup file for restoration"""
        user_id = message.from_user.id
        if user_id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        if not message.document:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP-—Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            return

        if not message.document.file_name.endswith(".zip"):
            await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP")
            return

        status_message = await message.answer(
            "üì• <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...</b>"
        )

        try:
            # Download backup file
            file_info = await bot.get_file(message.document.file_id)
            backup_file_path = f"/tmp/restore_backup_{message.document.file_name}"

            await bot.download_file(file_info.file_path, backup_file_path)

            # Restore from backup
            success = await restore_from_backup(backup_file_path)

            if success:
                await status_message.edit_text(
                    "‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    "üîÑ –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.\n"
                    "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã."
                )
                logger.info(
                    f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {message.document.file_name}"
                )
            else:
                await status_message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏</b>\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                )

            # Clean up downloaded file
            try:
                os.remove(backup_file_path)
            except:
                pass

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            await status_message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )

        await state.clear()

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


async def create_backup():
    """Create a backup of all important data"""
    try:
        moscow_tz = pytz.timezone("Europe/Moscow")
        current_time = datetime.now(moscow_tz)
        timestamp = current_time.strftime("%Y%m%d_%H%M%S")

        backup_dir = "/app/backups"
        os.makedirs(backup_dir, exist_ok=True)

        backup_filename = f"backup_{timestamp}.zip"
        backup_path = os.path.join(backup_dir, backup_filename)

        with zipfile.ZipFile(backup_path, "w", zipfile.ZIP_DEFLATED) as zipf:
            # Add database file
            if os.path.exists(DB_PATH):
                zipf.write(DB_PATH, "race_participants.db")
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–µ–∫–∞–ø")

            # Add configuration files
            config_files = ["config.json", "messages.json"]
            for config_file in config_files:
                if os.path.exists(config_file):
                    zipf.write(config_file, config_file)
                    logger.info(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–∫–∞–ø")

            # Add images directory
            images_dir = "/app/images"
            if os.path.exists(images_dir):
                for root, dirs, files in os.walk(images_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arc_path = os.path.relpath(file_path, "/app")
                        zipf.write(file_path, arc_path)
                logger.info("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–µ–∫–∞–ø")

            # Add backup metadata
            metadata = {
                "backup_date": current_time.isoformat(),
                "backup_version": "1.0",
                "description": "Beer Block Registration Bot Backup",
                "files_included": [],
            }

            # List all files in backup
            for info in zipf.infolist():
                metadata["files_included"].append(
                    {
                        "filename": info.filename,
                        "size": info.file_size,
                        "compressed_size": info.compress_size,
                    }
                )

            # Add metadata to backup
            zipf.writestr(
                "backup_metadata.json",
                json.dumps(metadata, indent=2, ensure_ascii=False),
            )

        logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        return backup_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None


async def automatic_backup_scheduler(bot: Bot, admin_id: int):
    """Automatic backup scheduler - runs every 6 hours"""
    logger.info("–ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±–µ–∫–∞–ø–æ–≤ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)")

    while True:
        try:
            # Wait 6 hours
            await asyncio.sleep(6 * 60 * 60)  # 6 hours in seconds

            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")

            # Create backup
            backup_file = await create_backup()

            if backup_file and os.path.exists(backup_file):
                try:
                    # Send backup to admin
                    with open(backup_file, "rb") as f:
                        file_data = f.read()

                    input_file = BufferedInputFile(
                        file_data, os.path.basename(backup_file)
                    )

                    moscow_tz = pytz.timezone("Europe/Moscow")
                    current_time = datetime.now(moscow_tz)

                    # Send file first without caption
                    await bot.send_document(admin_id, input_file)

                    # Then send info message
                    caption = f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</b>\n\n"
                    caption += (
                        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {current_time.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n"
                    )
                    caption += f"üìÅ –§–∞–π–ª: {os.path.basename(backup_file)}\n"
                    caption += f"üìä –†–∞–∑–º–µ—Ä: {len(file_data) / 1024:.1f} –ö–ë\n\n"
                    caption += "üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤"

                    await bot.send_message(admin_id, caption)

                    logger.info(
                        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                    )

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}"
                    )

                # Clean up local file after sending
                try:
                    os.remove(backup_file)
                except:
                    pass
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")

                # Notify admin about backup failure
                try:
                    await bot.send_message(
                        admin_id,
                        "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–µ–∫–∞–ø–∞</b>\n\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. "
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –±–µ–∫–∞–ø –≤—Ä—É—á–Ω—É—é.",
                    )
                except:
                    pass

            # Clean up old local backups (keep only last 5 local backups)
            try:
                backup_dir = "/app/backups"
                if os.path.exists(backup_dir):
                    backup_files = [
                        f for f in os.listdir(backup_dir) if f.endswith(".zip")
                    ]
                    backup_files.sort()

                    # Remove old backups, keep last 5
                    while len(backup_files) > 5:
                        oldest_backup = backup_files.pop(0)
                        os.remove(os.path.join(backup_dir, oldest_backup))
                        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∞–≤—Ç–æ–±–µ–∫–∞–ø: {oldest_backup}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∞–≤—Ç–æ–±–µ–∫–∞–ø–æ–≤: {e}")

        except asyncio.CancelledError:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±–µ–∫–∞–ø–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±–µ–∫–∞–ø–æ–≤: {e}")
            # Continue running even if there's an error


async def start_automatic_backups(bot: Bot, admin_id: int):
    """Start automatic backups on bot startup"""
    global backup_task
    if backup_task is None or backup_task.done():
        backup_task = asyncio.create_task(automatic_backup_scheduler(bot, admin_id))
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã –∑–∞–ø—É—â–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")


async def stop_automatic_backups():
    """Stop automatic backups on bot shutdown"""
    global backup_task
    if backup_task and not backup_task.done():
        backup_task.cancel()
        try:
            await backup_task
        except asyncio.CancelledError:
            pass
        logger.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±–µ–∫–∞–ø—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")


async def restore_from_backup(backup_file_path: str) -> bool:
    """Restore data from backup file"""
    try:
        if not os.path.exists(backup_file_path):
            logger.error(f"–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file_path}")
            return False

        # Create temporary directory for extraction
        temp_dir = "/tmp/backup_restore"
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        os.makedirs(temp_dir, exist_ok=True)

        logger.info(f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑: {backup_file_path}")

        # Extract backup file
        with zipfile.ZipFile(backup_file_path, "r") as zipf:
            zipf.extractall(temp_dir)
            logger.info("–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω")

        # Validate backup structure
        extracted_files = os.listdir(temp_dir)
        if not extracted_files:
            logger.error("–ü—É—Å—Ç–æ–π –∞—Ä—Ö–∏–≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            return False

        # Check for metadata file
        metadata_file = os.path.join(temp_dir, "backup_metadata.json")
        if os.path.exists(metadata_file):
            try:
                with open(metadata_file, "r", encoding="utf-8") as f:
                    metadata = json.load(f)
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∫–∞–ø–∞: {metadata.get('backup_date')}")
            except:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∫–∞–ø–∞")

        # Restore database
        db_backup_path = os.path.join(temp_dir, "race_participants.db")
        if os.path.exists(db_backup_path):
            # Create backup of current database before restore
            if os.path.exists(DB_PATH):
                current_db_backup = f"{DB_PATH}.backup_before_restore"
                shutil.copy2(DB_PATH, current_db_backup)
                logger.info(f"–¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {current_db_backup}")

            # Restore database
            shutil.copy2(db_backup_path, DB_PATH)
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            logger.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")

        # Restore configuration files
        for config_file in ["config.json", "messages.json"]:
            config_backup_path = os.path.join(temp_dir, config_file)
            if os.path.exists(config_backup_path):
                # Backup current config
                if os.path.exists(config_file):
                    current_config_backup = f"{config_file}.backup_before_restore"
                    shutil.copy2(config_file, current_config_backup)
                    logger.info(
                        f"–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª {config_file} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {current_config_backup}"
                    )

                # Restore config
                shutil.copy2(config_backup_path, config_file)
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")
            else:
                logger.warning(
                    f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
                )

        # Restore images directory
        images_backup_dir = os.path.join(temp_dir, "images")
        images_target_dir = "/app/images"

        if os.path.exists(images_backup_dir):
            # Backup current images directory
            if os.path.exists(images_target_dir):
                current_images_backup = "/app/images_backup_before_restore"
                if os.path.exists(current_images_backup):
                    shutil.rmtree(current_images_backup)
                shutil.copytree(images_target_dir, current_images_backup)
                logger.info(
                    f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {current_images_backup}"
                )

                # Remove current images
                shutil.rmtree(images_target_dir)

            # Restore images
            shutil.copytree(images_backup_dir, images_target_dir)
            logger.info("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            logger.warning("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")

        # Clean up temporary directory
        shutil.rmtree(temp_dir)

        logger.info("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

        # Clean up on error
        try:
            if "temp_dir" in locals() and os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
        except:
            pass

        return False
