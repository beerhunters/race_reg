"""
Event management handlers for creating and managing racing events.
Handles event creation flow with location, date, and pricing setup.
"""

import re
from datetime import datetime
from pytz import timezone

from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from logging_config import get_logger, log
from .utils import messages, RegistrationForm
from .validation import sanitize_input
from database import (
    set_setting,
    get_setting,
    get_participant_count,
    clear_participants,
)

logger = get_logger(__name__)


def create_event_confirmation_keyboard():
    """Create keyboard for event creation confirmation"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_create_event"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_create_event")
            ]
        ]
    )
    return keyboard


async def handle_create_event_command(message: Message, state: FSMContext):
    """Handle /create_event command or callback (admin only)"""
    log.admin_action("create_event_start", message.from_user.id)

    # Check if there are existing participants
    participants_count = get_participant_count()
    if participants_count > 0:
        await message.answer(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å {participants_count} —É—á–∞—Å—Ç–Ω–∏–∫(–æ–≤).\n"
            "–ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>üèÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–Ω–∫–æ–π ‚Üí –ó–∞–∫–æ–Ω—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>"
        )
        return

    await message.answer(
        messages.get("create_event_start",
            "üéâ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è</b>\n\n"
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ. –Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
            "üìç <b>–®–∞–≥ 1/3:</b> –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è\n"
            "(–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ, –ú–æ—Å–∫–≤–∞)"
        )
    )
    await state.set_state(RegistrationForm.waiting_for_create_event_location)


async def handle_event_location_input(message: Message, state: FSMContext):
    """Handle event location input"""
    location = sanitize_input(message.text, 200)

    if not location or len(location) < 3:
        await message.answer(
            messages.get("event_invalid_location",
                "‚ùå –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–Ω–æ–≤–∞:"
            )
        )
        return

    # Save location to state
    await state.update_data(event_location=location)

    await message.answer(
        messages.get("create_event_location_prompt",
            "‚úÖ –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{location}</b>\n\n"
            "üìÖ <b>–®–∞–≥ 2/3:</b> –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>23:59 31.12.2024</code>"
        ).format(location=location)
    )
    await state.set_state(RegistrationForm.waiting_for_create_event_date)


async def handle_event_date_input(message: Message, state: FSMContext):
    """Handle event date input"""
    date_input = sanitize_input(message.text, 20)

    # Validate date format (HH:MM DD.MM.YYYY)
    date_pattern = r'^\d{2}:\d{2}\s+\d{2}\.\d{2}\.\d{4}$'
    if not re.match(date_pattern, date_input):
        await message.answer(
            messages.get("event_invalid_date",
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú –î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>23:59 31.12.2024</code>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
        )
        return

    # Validate that it's a real date and in the future
    try:
        event_datetime = datetime.strptime(date_input, "%H:%M %d.%m.%Y")
        moscow_tz = timezone("Europe/Moscow")
        event_datetime = moscow_tz.localize(event_datetime)
        current_time = datetime.now(moscow_tz)

        if event_datetime <= current_time:
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:"
            )
            return

    except ValueError:
        await message.answer(
            messages.get("event_invalid_date",
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π –¥–∞—Ç—ã.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
        )
        return

    # Save registration end date to state
    await state.update_data(reg_end_date=date_input)

    # Calculate event_date as next day after registration ends
    try:
        from datetime import timedelta
        reg_end_datetime = datetime.strptime(date_input, "%H:%M %d.%m.%Y")
        event_datetime = reg_end_datetime + timedelta(days=1)
        event_date_str = event_datetime.strftime("%d %B %Y")
        # Convert month name to Russian
        months_ru = {
            'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞',
            'April': '–∞–ø—Ä–µ–ª—è', 'May': '–º–∞—è', 'June': '–∏—é–Ω—è',
            'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞', 'September': '—Å–µ–Ω—Ç—è–±—Ä—è',
            'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
        }
        for eng, rus in months_ru.items():
            event_date_str = event_date_str.replace(eng, rus)
        await state.update_data(event_date=event_date_str)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è: {e}")
        event_date_str = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

    await message.answer(
        messages.get("create_event_time_prompt",
            "‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <b>{reg_end_date}</b>\n"
            "‚úÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: <b>{event_date}</b>\n\n"
            "üïí <b>–®–∞–≥ 3/4:</b> –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>14:00</code>"
        ).format(reg_end_date=date_input, event_date=event_date_str)
    )
    await state.set_state(RegistrationForm.waiting_for_create_event_time)


async def handle_event_time_input(message: Message, state: FSMContext):
    """Handle event time input"""
    time_input = sanitize_input(message.text, 10)

    # Validate time format (HH:MM)
    time_pattern = r'^\d{2}:\d{2}$'
    if not re.match(time_pattern, time_input):
        await message.answer(
            messages.get("event_invalid_time",
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–ß–ß:–ú–ú</code>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>14:00</code>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
        )
        return

    # Validate that it's a valid time
    try:
        hours, minutes = map(int, time_input.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            raise ValueError("Invalid time range")
    except ValueError:
        await message.answer(
            messages.get("event_invalid_time",
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è! –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
        )
        return

    # Save time to state
    await state.update_data(event_time=time_input)

    # Get current price from config or settings
    current_price = get_setting("participation_fee")
    if not current_price:
        from .utils import config
        current_price = config.get("participation_fee", 750)

    await message.answer(
        messages.get("create_event_price_prompt",
            "‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è: <b>{time}</b>\n\n"
            "üí∞ <b>–®–∞–≥ 4/4:</b> –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä—É–±–ª—è—Ö\n\n"
            "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price} ‚ÇΩ</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é:"
        ).format(time=time_input, current_price=current_price)
    )
    await state.set_state(RegistrationForm.waiting_for_event_price)


async def handle_event_price_input(message: Message, state: FSMContext):
    """Handle event price input"""
    price_input = sanitize_input(message.text, 10)

    # If user sends '-', keep current price
    if price_input == '-':
        current_price = get_setting("participation_fee")
        if not current_price:
            from .utils import config
            current_price = config.get("participation_fee", 750)
        price = current_price
    else:
        # Validate price (must be a positive number)
        try:
            price = int(price_input)
            if price < 0:
                await message.answer(
                    messages.get("event_invalid_price",
                        "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!\n\n"
                        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä—É–±–ª—è—Ö:"
                    )
                )
                return
        except ValueError:
            await message.answer(
                messages.get("event_invalid_price",
                    "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ '-' —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é:"
                )
            )
            return

    # Save price to state
    await state.update_data(event_price=price)

    # Get all data from state
    data = await state.get_data()
    location = data.get('event_location')
    reg_end_date = data.get('reg_end_date')
    event_date = data.get('event_date')
    event_time = data.get('event_time')

    # Show confirmation
    await message.answer(
        messages.get("create_event_confirmation",
            "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
            "üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{location}</b>\n"
            "üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{event_date}</b>\n"
            "üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{event_time}</b>\n"
            "üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ: <b>{reg_end_date}</b>\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: <b>{price} ‚ÇΩ</b>\n\n"
            "‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ? –°–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ?"
        ).format(location=location, event_date=event_date, event_time=event_time,
                 reg_end_date=reg_end_date, price=price),
        reply_markup=create_event_confirmation_keyboard()
    )
    await state.set_state(RegistrationForm.waiting_for_event_confirmation)


async def handle_confirm_create_event(callback: CallbackQuery, state: FSMContext):
    """Handle event creation confirmation"""
    data = await state.get_data()
    location = data.get('event_location')
    event_date = data.get('event_date')
    event_time = data.get('event_time')
    reg_end_date = data.get('reg_end_date')
    price = data.get('event_price')

    # Save to database
    set_setting("event_location", location)
    set_setting("event_date", event_date)
    set_setting("event_time", event_time)
    set_setting("reg_end_date", reg_end_date)
    set_setting("participation_fee", price)

    log.admin_action("event_created", callback.from_user.id,
                     f"Location: {location}, Date: {event_date}, Time: {event_time}, Reg ends: {reg_end_date}, Price: {price}")

    await callback.message.edit_text(
        messages.get("create_event_success",
            "‚úÖ <b>–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
            "üìç –ú–µ—Å—Ç–æ: <b>{location}</b>\n"
            "üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{event_date}</b>\n"
            "üïí –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{event_time}</b>\n"
            "üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ: <b>{reg_end_date}</b>\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ! üéâ"
        ).format(location=location, event_date=event_date, event_time=event_time,
                 reg_end_date=reg_end_date, price=price)
    )
    await state.clear()
    await callback.answer("–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")


async def handle_cancel_create_event(callback: CallbackQuery, state: FSMContext):
    """Handle event creation cancellation"""
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    )
    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


def register_event_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    """Register event management handlers"""

    # Command handler
    dp.message.register(
        handle_create_event_command,
        Command("create_event"),
        F.from_user.id == admin_id
    )

    # Callback handler for button
    async def create_event_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.delete()
        await handle_create_event_command(callback.message, state)
        await callback.answer()

    dp.callback_query.register(
        create_event_callback,
        F.data == "admin_create_event",
        F.from_user.id == admin_id
    )

    # FSM state handlers
    dp.message.register(
        handle_event_location_input,
        StateFilter(RegistrationForm.waiting_for_create_event_location)
    )

    dp.message.register(
        handle_event_date_input,
        StateFilter(RegistrationForm.waiting_for_create_event_date)
    )

    dp.message.register(
        handle_event_time_input,
        StateFilter(RegistrationForm.waiting_for_create_event_time)
    )

    dp.message.register(
        handle_event_price_input,
        StateFilter(RegistrationForm.waiting_for_event_price)
    )

    # Confirmation callbacks
    dp.callback_query.register(
        handle_confirm_create_event,
        F.data == "confirm_create_event",
        F.from_user.id == admin_id
    )

    dp.callback_query.register(
        handle_cancel_create_event,
        F.data == "cancel_create_event",
        F.from_user.id == admin_id
    )

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
