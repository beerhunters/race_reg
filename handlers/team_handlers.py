from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from .utils import logger, RegistrationForm
from database import (
    create_team,
    get_all_teams,
    get_team_by_id,
    get_team_by_member,
    delete_team,
    get_participants_with_team_category,
    get_participant_by_user_id,
    set_team_result,
)


def create_team_management_keyboard():
    """Create keyboard for team management"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="create_teams")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="list_teams")],
            [InlineKeyboardButton(text="üèÅ –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="record_team_result")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="delete_team_prompt")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    return keyboard


def create_team_selection_keyboard(participants: list):
    """Create keyboard for selecting team members"""
    buttons = []
    for user_id, username, name, _, _ in participants:
        display_name = f"{name} (@{username or '–±–µ–∑ username'})"
        buttons.append([InlineKeyboardButton(
            text=display_name,
            callback_data=f"select_member_{user_id}"
        )])

    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_team_creation")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def register_team_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    """Register team management handlers"""

    @dp.message(Command("teams"))
    async def teams_command(message: Message):
        """Handle /teams command"""
        user_id = message.from_user.id
        if user_id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        text = "üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ö–æ–º–∞–Ω–¥–∞'.\n"
        text += "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö.\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await message.answer(text, reply_markup=create_team_management_keyboard(), parse_mode="HTML")

    @dp.callback_query(F.data == "create_teams")
    async def handle_create_teams(callback: CallbackQuery, state: FSMContext):
        """Handle team creation"""
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # Get participants with category '–ö–æ–º–∞–Ω–¥–∞' who are not in a team yet
        participants = get_participants_with_team_category()

        if len(participants) < 2:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '–ö–æ–º–∞–Ω–¥–∞' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # Store participants in state
        await state.update_data(available_participants=participants, selected_members=[])

        text = f"üë• <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        text += f"–î–æ—Å—Ç—É–ø–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã:"

        await callback.message.edit_text(
            text,
            reply_markup=create_team_selection_keyboard(participants),
            parse_mode="HTML"
        )
        await state.set_state(RegistrationForm.selecting_team_member1)
        await callback.answer()

    @dp.callback_query(F.data.startswith("select_member_"), RegistrationForm.selecting_team_member1)
    async def handle_select_member1(callback: CallbackQuery, state: FSMContext):
        """Handle selection of first team member"""
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        user_id = int(callback.data.replace("select_member_", ""))
        data = await state.get_data()
        participants = data.get("available_participants", [])

        # Find selected participant
        selected = None
        remaining = []
        for p in participants:
            if p[0] == user_id:
                selected = p
            else:
                remaining.append(p)

        if not selected:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # Store selected member and remaining participants
        await state.update_data(
            selected_members=[user_id],
            available_participants=remaining,
            member1_name=selected[2]
        )

        text = f"üë• <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        text += f"‚úÖ –ü–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {selected[2]}\n\n"
        text += f"–î–æ—Å—Ç—É–ø–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(remaining)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã:"

        await callback.message.edit_text(
            text,
            reply_markup=create_team_selection_keyboard(remaining),
            parse_mode="HTML"
        )
        await state.set_state(RegistrationForm.selecting_team_member2)
        await callback.answer()

    @dp.callback_query(F.data.startswith("select_member_"), RegistrationForm.selecting_team_member2)
    async def handle_select_member2(callback: CallbackQuery, state: FSMContext):
        """Handle selection of second team member"""
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        user_id = int(callback.data.replace("select_member_", ""))
        data = await state.get_data()
        selected_members = data.get("selected_members", [])
        member1_id = selected_members[0]
        member1_name = data.get("member1_name", "")

        # Create team
        result = create_team(member1_id, user_id)

        if result["success"]:
            team_name = result["team_name"]
            team_id = result["team_id"]

            # Get both members' info
            member1 = get_participant_by_user_id(member1_id)
            member2 = get_participant_by_user_id(user_id)

            # Notify admin
            admin_text = f"‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            admin_text += f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {team_name}\n"
            admin_text += f"üÜî ID –∫–æ–º–∞–Ω–¥—ã: {team_id}\n\n"
            admin_text += f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ 1: {member1[2]} (ID: {member1_id})\n"
            admin_text += f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ 2: {member2[2]} (ID: {user_id})\n"

            await callback.message.edit_text(admin_text, parse_mode="HTML")

            # Notify team members
            member1_text = f"üéâ <b>–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É!</b>\n\n"
            member1_text += f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n"
            member1_text += f"üë• –í–∞—à –Ω–∞–ø–∞—Ä–Ω–∏–∫: {member2[2]}\n\n"
            member1_text += f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ –≥–æ–Ω–∫–µ!"

            member2_text = f"üéâ <b>–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É!</b>\n\n"
            member2_text += f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}\n"
            member2_text += f"üë• –í–∞—à –Ω–∞–ø–∞—Ä–Ω–∏–∫: {member1[2]}\n\n"
            member2_text += f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –Ω–∞ –≥–æ–Ω–∫–µ!"

            try:
                await bot.send_message(member1_id, member1_text, parse_mode="HTML")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {member1[2]} (ID: {member1_id})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {member1_id}: {e}")

            try:
                await bot.send_message(user_id, member2_text, parse_mode="HTML")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {member2[2]} (ID: {user_id})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id}: {e}")

        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:\n{result['error']}",
                parse_mode="HTML"
            )

        await state.clear()
        await callback.answer()

    @dp.callback_query(F.data == "cancel_team_creation")
    async def handle_cancel_team_creation(callback: CallbackQuery, state: FSMContext):
        """Cancel team creation"""
        await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        await callback.answer()

    @dp.callback_query(F.data == "list_teams")
    async def handle_list_teams(callback: CallbackQuery):
        """List all teams"""
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        teams = get_all_teams()

        if not teams:
            await callback.message.edit_text(
                "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n–ö–æ–º–∞–Ω–¥ –ø–æ–∫–∞ –Ω–µ—Ç.",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        text = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n"

        for i, team in enumerate(teams, 1):
            team_id, team_name, result, created_date, member1_id, member1_name, member1_result, member2_id, member2_name, member2_result = team

            text += f"{i}. üèÜ <b>{team_name}</b> (ID: {team_id})\n"
            text += f"   üë§ {member1_name} - {member1_result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
            text += f"   üë§ {member2_name} - {member2_result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
            text += f"   üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n\n"

        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "record_team_result")
    async def handle_record_team_result_callback(callback: CallbackQuery, state: FSMContext):
        """Handle record team result button"""
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        teams = get_all_teams()

        if not teams:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        text = "üèÅ <b>–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        text += "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"

        for team in teams:
            team_id, team_name, result, _, _, member1_name, member1_result, _, member2_name, member2_result = team
            text += f"‚Ä¢ ID: {team_id} - <b>{team_name}</b>\n"
            text += f"  üë§ {member1_name}: {member1_result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
            text += f"  üë§ {member2_name}: {member2_result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
            text += f"  üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n\n"

        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        text += "<code>ID_–∫–æ–º–∞–Ω–¥—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç</code>\n\n"
        text += "–ü—Ä–∏–º–µ—Ä: <code>1 12:34</code>"

        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(RegistrationForm.waiting_for_team_result)
        await callback.answer()

    @dp.callback_query(F.data == "delete_team_prompt")
    async def handle_delete_team_prompt(callback: CallbackQuery):
        """Prompt for team ID to delete"""
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        teams = get_all_teams()

        if not teams:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        text = "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        text += "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"

        for team in teams:
            team_id, team_name, _, _, _, member1_name, _, _, member2_name, _ = team
            text += f"‚Ä¢ ID: {team_id} - {team_name} ({member1_name} & {member2_name})\n"

        text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"

        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer()

    @dp.message(Command("set_team_result"))
    async def handle_set_team_result_command(message: Message, state: FSMContext):
        """Handle /set_team_result command"""
        user_id = message.from_user.id
        if user_id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        teams = get_all_teams()

        if not teams:
            await message.answer("‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.", parse_mode="HTML")
            return

        text = "üèÅ <b>–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        text += "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"

        for team in teams:
            team_id, team_name, result, _, _, member1_name, member1_result, _, member2_name, member2_result = team
            text += f"‚Ä¢ ID: {team_id} - <b>{team_name}</b>\n"
            text += f"  üë§ {member1_name}: {member1_result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
            text += f"  üë§ {member2_name}: {member2_result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
            text += f"  üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n\n"

        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        text += "<code>ID_–∫–æ–º–∞–Ω–¥—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç</code>\n\n"
        text += "–ü—Ä–∏–º–µ—Ä: <code>1 12:34</code>"

        await message.answer(text, parse_mode="HTML")
        await state.set_state(RegistrationForm.waiting_for_team_result)

    @dp.message(RegistrationForm.waiting_for_team_result)
    async def handle_team_result_input(message: Message, state: FSMContext):
        """Handle team result input"""
        user_id = message.from_user.id
        if user_id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # Parse input: team_id result
        parts = message.text.strip().split(maxsplit=1)

        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>ID_–∫–æ–º–∞–Ω–¥—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç</code>", parse_mode="HTML")
            return

        try:
            team_id = int(parts[0])
            result_time = parts[1].strip()
        except ValueError:
            await message.answer("‚ùå ID –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.", parse_mode="HTML")
            return

        # Validate time format (should be in format like 12:34 or 1:23:45)
        if not result_time.replace(":", "").replace(".", "").isdigit():
            await message.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:34)", parse_mode="HTML")
            return

        # Get team info
        team = get_team_by_id(team_id)

        if not team:
            await message.answer(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å ID {team_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
            return

        # Set team result
        success = set_team_result(team_id, result_time)

        if success:
            # Get updated team info with member details
            team_data = get_team_by_id(team_id)
            team_id, team_name, _, member1_id, member2_id = team_data

            # Get member info
            member1 = get_participant_by_user_id(member1_id)
            member2 = get_participant_by_user_id(member2_id)

            member1_name = member1[2]
            member2_name = member2[2]
            member1_result = member1[8] or "–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
            member2_result = member2[8] or "–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"

            # Notify admin
            admin_text = f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n"
            admin_text += f"üèÜ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n"
            admin_text += f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_time}\n\n"
            admin_text += f"üë§ {member1_name}: {member1_result}\n"
            admin_text += f"üë§ {member2_name}: {member2_result}"

            await message.answer(admin_text, parse_mode="HTML")

            # Notify team members
            member1_text = f"üéâ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n"
            member1_text += f"üèÜ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n"
            member1_text += f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result_time}\n\n"
            member1_text += f"üë§ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {member1_result}\n"
            member1_text += f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ ({member2_name}): {member2_result}\n\n"
            member1_text += f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≥–æ–Ω–∫–∏! üéä"

            member2_text = f"üéâ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n"
            member2_text += f"üèÜ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n"
            member2_text += f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result_time}\n\n"
            member2_text += f"üë§ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {member2_result}\n"
            member2_text += f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ ({member1_name}): {member1_result}\n\n"
            member2_text += f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≥–æ–Ω–∫–∏! üéä"

            try:
                await bot.send_message(member1_id, member1_text, parse_mode="HTML")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {member1_name} (ID: {member1_id})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {member1_id}: {e}")

            try:
                await bot.send_message(member2_id, member2_text, parse_mode="HTML")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {member2_name} (ID: {member2_id})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {member2_id}: {e}")

        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")

        await state.clear()

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
