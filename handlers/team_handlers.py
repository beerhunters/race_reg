from aiogram import Dispatcher, Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from .utils import logger, RegistrationForm
from database import (
    get_participant_by_user_id,
    get_teams_from_participants,
    set_result,
)


def create_team_management_keyboard():
    """Create keyboard for team management"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="list_teams")],
            [InlineKeyboardButton(text="üèÅ –ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="record_team_result")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    return keyboard


def register_team_handlers(dp: Dispatcher, bot: Bot, admin_id: int):
    """Register team management handlers"""

    @dp.message(Command("teams"))
    async def teams_command(message: Message):
        """Handle /teams command"""
        user_id = message.from_user.id
        if user_id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        text = "üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–ö–æ–º–∞–Ω–¥–∞'.\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        await message.answer(text, reply_markup=create_team_management_keyboard(), parse_mode="HTML")

    @dp.callback_query(F.data == "list_teams")
    async def handle_list_teams(callback: CallbackQuery):
        """List all teams from participants table"""
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        teams = get_teams_from_participants()

        if not teams:
            await callback.message.edit_text(
                "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n–ö–æ–º–∞–Ω–¥ –ø–æ–∫–∞ –Ω–µ—Ç.",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        text = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</b>\n\n"

        for i, team in enumerate(teams, 1):
            team_name, member1_id, member1_name, member1_username, member2_id, member2_name, member2_username = team

            text += f"{i}. <b>{team_name}</b>\n"
            text += f"   ‚Ä¢ {member1_name} (@{member1_username or '–Ω–µ—Ç username'})\n"
            text += f"   ‚Ä¢ {member2_name} (@{member2_username or '–Ω–µ—Ç username'})\n\n"

        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer()

    @dp.callback_query(F.data == "record_team_result")
    async def handle_record_team_result_callback(callback: CallbackQuery, state: FSMContext):
        """Handle record team result button"""
        if callback.from_user.id != admin_id:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        teams = get_teams_from_participants()

        if not teams:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
                parse_mode="HTML"
            )
            await callback.answer()
            return

        text = "üèÅ <b>–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        text += "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"

        for i, team in enumerate(teams, 1):
            team_name, member1_id, member1_name, member1_username, member2_id, member2_name, member2_username = team

            # Get current results for members
            member1_info = get_participant_by_user_id(member1_id)
            member2_info = get_participant_by_user_id(member2_id)
            member1_result = member1_info[8] if member1_info else None
            member2_result = member2_info[8] if member2_info else None

            text += f"{i}. <b>{team_name}</b>\n"
            text += f"   ‚Ä¢ {member1_name} (@{member1_username or '–Ω–µ—Ç username'}): {member1_result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n"
            text += f"   ‚Ä¢ {member2_name} (@{member2_username or '–Ω–µ—Ç username'}): {member2_result or '–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'}\n\n"

        text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        text += "<code>–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–∞–Ω–¥—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç</code>\n\n"
        text += "–ü—Ä–∏–º–µ—Ä: <code>Team Alpha 12:34</code>"

        await callback.message.edit_text(text, parse_mode="HTML")
        await state.set_state(RegistrationForm.waiting_for_team_result)
        await callback.answer()

    @dp.message(RegistrationForm.waiting_for_team_result)
    async def handle_team_result_input(message: Message, state: FSMContext):
        """Handle team result input"""
        user_id = message.from_user.id
        if user_id != admin_id:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        # Parse input: team_name result
        parts = message.text.strip().split(maxsplit=1)

        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–∞–Ω–¥—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç</code>", parse_mode="HTML")
            return

        team_name_input = parts[0].strip()
        result_time = parts[1].strip()

        # Validate time format (should be in format like 12:34 or 1:23:45)
        if not result_time.replace(":", "").replace(".", "").isdigit():
            await message.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12:34)", parse_mode="HTML")
            return

        # Find team by name
        teams = get_teams_from_participants()
        team_found = None

        for team in teams:
            team_name, member1_id, member1_name, member1_username, member2_id, member2_name, member2_username = team
            if team_name.lower() == team_name_input.lower():
                team_found = team
                break

        if not team_found:
            await message.answer(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{team_name_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="HTML")
            return

        team_name, member1_id, member1_name, member1_username, member2_id, member2_name, member2_username = team_found

        # Set result for both team members
        success1 = set_result(member1_id, result_time)
        success2 = set_result(member2_id, result_time)

        if success1 and success2:
            # Notify admin
            admin_text = f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n"
            admin_text += f"üèÜ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n"
            admin_text += f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_time}\n\n"
            admin_text += f"üë§ {member1_name} (@{member1_username or '–Ω–µ—Ç username'}): {result_time}\n"
            admin_text += f"üë§ {member2_name} (@{member2_username or '–Ω–µ—Ç username'}): {result_time}"

            await message.answer(admin_text, parse_mode="HTML")

            # Notify team members
            member1_text = f"üéâ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n"
            member1_text += f"üèÜ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n"
            member1_text += f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result_time}\n\n"
            member1_text += f"üë§ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_time}\n"
            member1_text += f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ ({member2_name}): {result_time}\n\n"
            member1_text += f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≥–æ–Ω–∫–∏! üéä"

            member2_text = f"üéâ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∞–Ω!</b>\n\n"
            member2_text += f"üèÜ –ö–æ–º–∞–Ω–¥–∞: {team_name}\n"
            member2_text += f"üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã: {result_time}\n\n"
            member2_text += f"üë§ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_time}\n"
            member2_text += f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ ({member1_name}): {result_time}\n\n"
            member2_text += f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≥–æ–Ω–∫–∏! üéä"

            try:
                await bot.send_message(member1_id, member1_text, parse_mode="HTML")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {member1_name} (ID: {member1_id})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {member1_id}: {e}")

            try:
                await bot.send_message(member2_id, member2_text, parse_mode="HTML")
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {member2_name} (ID: {member2_id})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {member2_id}: {e}")

        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã.", parse_mode="HTML")

        await state.clear()

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
