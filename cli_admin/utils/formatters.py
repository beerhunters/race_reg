"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

from datetime import datetime
from typing import Optional
import pytz


def format_date(date_str: str, format_out: str = "%d.%m.%Y") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É

    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
        format_out: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    """
    if not date_str:
        return "-"

    try:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        for fmt in ["%Y-%m-%d %H:%M:%S", "%Y-%m-%d", "%d.%m.%Y"]:
            try:
                dt = datetime.strptime(date_str, fmt)
                return dt.strftime(format_out)
            except ValueError:
                continue

        return date_str  # –í–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    except Exception:
        return date_str


def format_datetime(dt_str: str, format_out: str = "%d.%m.%Y %H:%M") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è

    Args:
        dt_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        format_out: –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    """
    return format_date(dt_str, format_out)


def format_phone(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    Args:
        phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    """
    if not phone:
        return "-"

    # –£–±—Ä–∞—Ç—å –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    cleaned = ''.join(c for c in phone if c.isdigit() or c == '+')

    if not cleaned:
        return "-"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä
    if cleaned.startswith('+7') or cleaned.startswith('7'):
        if cleaned.startswith('+7'):
            cleaned = cleaned[2:]
        elif cleaned.startswith('7'):
            cleaned = cleaned[1:]

        if len(cleaned) == 10:
            return f"+7 ({cleaned[0:3]}) {cleaned[3:6]}-{cleaned[6:8]}-{cleaned[8:10]}"

    return phone


def format_payment_status(status: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã

    Args:
        status: –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å —ç–º–æ–¥–∑–∏
    """
    status_map = {
        "paid": "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ",
        "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
        "unpaid": "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
    }
    return status_map.get(status, status)


def format_role(role: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–æ–ª—å

    Args:
        role: –†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–æ–ª—å —Å —ç–º–æ–¥–∑–∏
    """
    role_map = {
        "runner": "üèÉ –ë–µ–≥—É–Ω",
        "volunteer": "ü§ù –í–æ–ª–æ–Ω—Ç–µ—Ä"
    }
    return role_map.get(role, role)


def format_gender(gender: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª

    Args:
        gender: –ü–æ–ª

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª
    """
    if not gender:
        return "-"

    gender_lower = gender.lower()

    if gender_lower in ["m", "male", "–º", "–º—É–∂—Å–∫–æ–π"]:
        return "üë® –ú—É–∂—Å–∫–æ–π"
    elif gender_lower in ["f", "female", "–∂", "–∂–µ–Ω—Å–∫–∏–π"]:
        return "üë© –ñ–µ–Ω—Å–∫–∏–π"

    return gender


def format_bool(value: any) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ

    Args:
        value: –ë—É–ª–µ–≤–æ –∏–ª–∏ int –∑–Ω–∞—á–µ–Ω–∏–µ

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    """
    if isinstance(value, bool):
        return "‚úÖ –î–∞" if value else "‚ùå –ù–µ—Ç"
    elif isinstance(value, int):
        return "‚úÖ –î–∞" if value == 1 else "‚ùå –ù–µ—Ç"
    elif isinstance(value, str):
        if value.lower() in ["true", "yes", "–¥–∞", "1"]:
            return "‚úÖ –î–∞"
        else:
            return "‚ùå –ù–µ—Ç"

    return str(value)


def format_time(seconds: Optional[float]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ MM:SS

    Args:
        seconds: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    if seconds is None:
        return "-"

    try:
        seconds = float(seconds)
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes:02d}:{secs:02d}"
    except (ValueError, TypeError):
        return str(seconds)


def format_result(result: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–±–µ–≥–∞

    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    if not result or result == "-":
        return "-"

    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Å–µ–∫—É–Ω–¥—ã
    try:
        seconds = float(result)
        return format_time(seconds)
    except ValueError:
        return result


def truncate_string(s: str, length: int = 50, suffix: str = "...") -> str:
    """
    –û–±—Ä–µ–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã

    Args:
        s: –°—Ç—Ä–æ–∫–∞
        length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    if not s:
        return ""

    if len(s) <= length:
        return s

    return s[:length - len(suffix)] + suffix


def format_moscow_time(dt_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

    Args:
        dt_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å MSK
    """
    if not dt_str:
        return "-"

    try:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        for fmt in ["%Y-%m-%d %H:%M:%S", "%Y-%m-%d"]:
            try:
                dt = datetime.strptime(dt_str, fmt)
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –≤ MSK
                moscow_tz = pytz.timezone('Europe/Moscow')
                dt_msk = moscow_tz.localize(dt)
                return dt_msk.strftime("%d.%m.%Y %H:%M MSK")
            except ValueError:
                continue

        return dt_str
    except Exception:
        return dt_str


def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

    Args:
        size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    """
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.1f} TB"
