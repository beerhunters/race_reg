"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª–∏
"""

from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
from rich.progress import Progress, SpinnerColumn, TextColumn
from typing import List, Dict, Any, Optional
from datetime import datetime

from cli_admin.config import *
from cli_admin.database import (
    get_participant_count,
    get_participant_count_by_role,
    get_waitlist_by_role,
    get_all_teams,
    count_complete_teams,
    get_setting,
)

console = Console()


def print_success(message: str):
    """–í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    console.print(f"[{COLOR_SUCCESS}]{EMOJI_SUCCESS} {message}[/{COLOR_SUCCESS}]")


def print_error(message: str):
    """–í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    console.print(f"[{COLOR_ERROR}]{EMOJI_ERROR} {message}[/{COLOR_ERROR}]")


def print_warning(message: str):
    """–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    console.print(f"[{COLOR_WARNING}]{EMOJI_WARNING} {message}[/{COLOR_WARNING}]")


def print_info(message: str):
    """–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    console.print(f"[{COLOR_INFO}]{EMOJI_INFO} {message}[/{COLOR_INFO}]")


def clear_screen():
    """–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω"""
    console.clear()


def show_header(title: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    console.print()
    console.print(Panel(
        f"[bold cyan]{title}[/bold cyan]",
        border_style="blue"
    ))
    console.print()


def show_status():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    """
    clear_screen()

    # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    try:
        total_participants = get_participant_count()
        runners = get_participant_count_by_role("runner")
        volunteers = get_participant_count_by_role("volunteer")
        waitlist = len(get_waitlist_by_role())
        teams = len(get_all_teams())
        complete_teams = count_complete_teams()

        max_runners = get_setting("max_runners") or 100
        event_date = get_setting("event_date") or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        team_mode = get_setting("team_mode_enabled")

        # –ü–æ–¥—Å—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö
        from cli_admin.database import get_all_participants
        all_p = get_all_participants()
        paid_count = sum(1 for p in all_p if p[6] == 'paid')

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return

    # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    table = Table(show_header=False, box=None, padding=(0, 2))
    table.add_column(style="cyan", width=30)
    table.add_column(style="green")

    table.add_row(f"{EMOJI_RUNNER} –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–±–µ–≥—É–Ω–æ–≤):", f"{runners}/{max_runners}")
    table.add_row(f"üí≥ –û–ø–ª–∞—Ç–∏–ª–∏:", f"{paid_count}/{total_participants}")
    table.add_row(f"üìã –í –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è:", str(waitlist))
    table.add_row(f"{EMOJI_TEAM} –ö–æ–º–∞–Ω–¥:", f"{teams} ({complete_teams} –ø–æ–ª–Ω—ã—Ö)")
    table.add_row(f"üìÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", event_date)
    table.add_row(f"üë• –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º:", "‚úÖ –í–∫–ª—é—á–µ–Ω" if team_mode == 1 else "‚ùå –í—ã–∫–ª—é—á–µ–Ω")

    panel = Panel(
        table,
        title="[bold cyan]üç∫ Beer Mile - –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞[/bold cyan]",
        border_style="blue"
    )

    console.print(panel)
    console.print()


def display_participants_table(participants: List[tuple], title: str = "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"):
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

    Args:
        participants: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ë–î
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    """
    if not participants:
        print_warning("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    table = Table(title=title, show_lines=False)

    table.add_column("ID", style="cyan", width=10)
    table.add_column("–ò–º—è", style="green", width=20)
    table.add_column("Username", style="blue", width=15)
    table.add_column("–†–æ–ª—å", width=6)
    table.add_column("–û–ø–ª–∞—Ç–∞", width=8)
    table.add_column("–ù–æ–º–µ—Ä", width=8)
    table.add_column("–î–∞—Ç–∞ —Ä–µ–≥.", width=12)

    for p in participants:
        user_id, username, name, target_time, role, reg_date, payment, bib, *_ = p

        role_emoji = EMOJI_RUNNER if role == "runner" else EMOJI_VOLUNTEER
        payment_emoji = "‚úÖ" if payment == "paid" else "‚ùå"

        table.add_row(
            str(user_id),
            name[:18] + "..." if len(name) > 20 else name,
            f"@{username}" if username else "-",
            role_emoji,
            payment_emoji,
            bib or "-",
            reg_date[:10] if reg_date else "-"
        )

    console.print(table)
    console.print(f"\n[cyan]–í—Å–µ–≥–æ: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤[/cyan]")


def display_participant_details(participant: tuple):
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ

    Args:
        participant: –ö–æ—Ä—Ç–µ–∂ —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    """
    # participants table: user_id, username, name, target_time, role, reg_date, payment_status, bib_number, result, gender, category, cluster
    if len(participant) < 12:
        from cli_admin.utils.display import print_error
        print_error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–∞: {len(participant)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 12")
        return

    user_id, username, name, target_time, role, reg_date, payment, bib, result, gender, category, cluster = participant[:12]

    console.print("\n[bold cyan]‚îÅ‚îÅ‚îÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ ‚îÅ‚îÅ‚îÅ[/bold cyan]\n")

    console.print(f"  [cyan]Telegram ID:[/cyan] {user_id}")
    console.print(f"  [cyan]Username:[/cyan] @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
    console.print(f"  [cyan]–ò–º—è:[/cyan] {name}")
    console.print(f"  [cyan]–†–æ–ª—å:[/cyan] {'–ë–µ–≥—É–Ω ' + EMOJI_RUNNER if role == 'runner' else '–í–æ–ª–æ–Ω—Ç–µ—Ä ' + EMOJI_VOLUNTEER}")
    console.print(f"  [cyan]–¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è:[/cyan] {target_time or '-'}")
    console.print(f"  [cyan]–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:[/cyan] {reg_date}")
    console.print(f"  [cyan]–û–ø–ª–∞—Ç–∞:[/cyan] {'‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' if payment == 'paid' else '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}")
    console.print(f"  [cyan]–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä:[/cyan] {bib or '-'}")
    console.print(f"  [cyan]–ü–æ–ª:[/cyan] {gender or '-'}")
    console.print(f"  [cyan]–ö–∞—Ç–µ–≥–æ—Ä–∏—è:[/cyan] {category or '-'}")
    console.print(f"  [cyan]–ö–ª–∞—Å—Ç–µ—Ä:[/cyan] {cluster or '-'}")
    console.print(f"  [cyan]–†–µ–∑—É–ª—å—Ç–∞—Ç:[/cyan] {result or '-'}")

    console.print("\n[cyan]‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ[/cyan]\n")


def display_waitlist_table(waitlist: List[tuple], title: str = "–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è"):
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è

    Args:
        waitlist: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ –ë–î
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    """
    if not waitlist:
        print_warning("–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Å—Ç")
        return

    table = Table(title=title, show_lines=False)

    table.add_column("#", style="cyan", width=5)
    table.add_column("User ID", style="cyan", width=10)
    table.add_column("–ò–º—è", style="green", width=20)
    table.add_column("–†–æ–ª—å", width=6)
    table.add_column("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", width=12)
    table.add_column("–°—Ç–∞—Ç—É—Å", width=12)

    for idx, w in enumerate(waitlist, 1):
        wl_id, user_id, username, name, target_time, role, gender, join_date, status, *_ = w

        role_emoji = EMOJI_RUNNER if role == "runner" else EMOJI_VOLUNTEER

        status_text = {
            "waiting": "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
            "notified": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω",
            "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
            "declined": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
        }.get(status, status)

        table.add_row(
            str(idx),
            str(user_id),
            name[:18] + "..." if len(name) > 20 else name,
            role_emoji,
            join_date[:10] if join_date else "-",
            status_text
        )

    console.print(table)
    console.print(f"\n[cyan]–í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(waitlist)}[/cyan]")


def display_teams_table(teams: List[tuple], title: str = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"):
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–∞–Ω–¥

    Args:
        teams: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∫–æ–º–∞–Ω–¥ –∏–∑ –ë–î
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    """
    if not teams:
        print_warning("–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    table = Table(title=title, show_lines=False)

    table.add_column("ID", style="cyan", width=5)
    table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="green", width=25)
    table.add_column("–£—á–∞—Å—Ç–Ω–∏–∫ 1", width=12)
    table.add_column("–£—á–∞—Å—Ç–Ω–∏–∫ 2", width=12)
    table.add_column("–°—Ç–∞—Ç—É—Å", width=10)
    table.add_column("–†–µ–∑—É–ª—å—Ç–∞—Ç", width=12)

    for t in teams:
        # teams table: team_id, team_name, member1_id, member2_id, result, created_date
        team_id, team_name, member1_id, member2_id, result, created_date, *_ = t

        member1 = str(member1_id) if member1_id else "-"
        member2 = str(member2_id) if member2_id else "-"

        if member1_id and member2_id:
            status = "‚úÖ –ü–æ–ª–Ω–∞—è"
        elif member1_id or member2_id:
            status = "‚è≥ –ù–µ–ø–æ–ª–Ω–∞—è"
        else:
            status = "‚ùå –ü—É—Å—Ç–∞—è"

        table.add_row(
            str(team_id) if team_id else "-",
            str(team_name) if team_name else "-",
            member1,
            member2,
            status,
            str(result) if result else "-"
        )

    console.print(table)
    console.print(f"\n[cyan]–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {len(teams)}[/cyan]")


def display_settings_table(settings: Dict[str, Any]):
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫

    Args:
        settings: –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    table = Table(title="–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_lines=False)

    table.add_column("–ü–∞—Ä–∞–º–µ—Ç—Ä", style="cyan", width=30)
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="green", width=40)

    for key, value in settings.items():
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
        key_formatted = key.replace("_", " ").title()

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if isinstance(value, bool):
            value_formatted = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if value else "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ"
        elif value is None:
            value_formatted = "-"
        else:
            value_formatted = str(value)

        table.add_row(key_formatted, value_formatted)

    console.print(table)


def display_edit_requests_table(requests: List[tuple], title: str = "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"):
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

    Args:
        requests: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –ë–î
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    """
    if not requests:
        print_warning("–ù–µ—Ç pending –∑–∞–ø—Ä–æ—Å–æ–≤")
        return

    table = Table(title=title, show_lines=False)

    table.add_column("ID", style="cyan", width=5)
    table.add_column("User ID", style="cyan", width=10)
    table.add_column("–ü–æ–ª–µ", width=12)
    table.add_column("–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", width=15)
    table.add_column("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", width=15)
    table.add_column("–î–∞—Ç–∞", width=12)

    for r in requests:
        req_id, user_id, field, old_value, new_value, status, request_date = r

        table.add_row(
            str(req_id),
            str(user_id),
            field,
            old_value or "-",
            new_value or "-",
            request_date[:10] if request_date else "-"
        )

    console.print(table)
    console.print(f"\n[cyan]–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(requests)}[/cyan]")


def show_progress(total: int, description: str = "Processing"):
    """
    –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä

    Args:
        total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        description: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞

    Returns:
        Progress –æ–±—ä–µ–∫—Ç
    """
    progress = Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console
    )
    return progress


def confirm_action(message: str, default: bool = False) -> bool:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    Returns:
        True –µ—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, False –∏–Ω–∞—á–µ
    """
    import questionary
    return questionary.confirm(message, default=default).ask()


def prompt_input(message: str, default: str = None) -> str:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    Returns:
        –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    import questionary
    return questionary.text(message, default=default).ask()


def prompt_select(message: str, choices: List[str]) -> str:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        choices: –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

    Returns:
        –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    """
    import questionary
    return questionary.select(message, choices=choices).ask()
