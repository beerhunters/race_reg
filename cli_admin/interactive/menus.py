"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ–Ω—é –¥–ª—è CLI
"""

import questionary
from rich.console import Console
from rich.panel import Panel

from cli_admin.utils.display import show_status, clear_screen
from cli_admin.commands import participants, settings, waitlist, teams, stats

console = Console()


def main_menu():
    """
    –ì–ª–∞–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    """
    while True:
        try:
            clear_screen()
            show_status()

            choice = questionary.select(
                "üç∫ Beer Mile Admin - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                choices=[
                    "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏",
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    "üìã –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è",
                    "üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏",
                    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    questionary.Separator(),
                    "‚ùå –í—ã—Ö–æ–¥"
                ],
                use_shortcuts=True,
                qmark="",
                pointer="‚ñ∫"
            ).ask()

            if choice == "‚ùå –í—ã—Ö–æ–¥":
                console.print("\n[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã[/yellow]\n")
                break
            elif choice == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏":
                participants_menu()
            elif choice == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è":
                settings_menu()
            elif choice == "üìã –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è":
                waitlist_menu()
            elif choice == "üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏":
                teams_menu()
            elif choice == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
                stats_menu()

        except KeyboardInterrupt:
            console.print("\n\n[yellow]–í—ã—Ö–æ–¥...[/yellow]")
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞: {str(e)}[/red]\n")
            questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def participants_menu():
    """
    –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
    """
    while True:
        try:
            clear_screen()
            console.print(Panel(
                "[bold cyan]üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏[/bold cyan]",
                border_style="blue"
            ))
            console.print()

            choice = questionary.select(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                    "üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                    "üí≥ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                    "üî¢ –ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä",
                    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                    "‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                    questionary.Separator(),
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
                use_shortcuts=True,
                qmark="",
                pointer="‚ñ∫"
            ).ask()

            if choice == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                break
            elif choice == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
                view_all_participants()
            elif choice == "üîç –ù–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞":
                find_participant()
            elif choice == "üí≥ –û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É":
                mark_payment()
            elif choice == "üî¢ –ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä":
                assign_bib_number()
            elif choice == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞":
                edit_participant()
            elif choice == "‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞":
                delete_participant()

        except KeyboardInterrupt:
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞: {str(e)}[/red]\n")
            questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def settings_menu():
    """
    –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    while True:
        try:
            clear_screen()
            console.print(Panel(
                "[bold cyan]‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è[/bold cyan]",
                border_style="blue"
            ))
            console.print()

            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            from cli_admin.database import get_setting

            max_runners = get_setting("max_runners") or "100"
            event_date = get_setting("event_date") or "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            team_mode = get_setting("team_mode_enabled")
            team_mode_text = "‚úÖ –í–∫–ª—é—á–µ–Ω" if team_mode == "1" or team_mode == 1 else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"

            console.print(f"[cyan]–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:[/cyan]")
            console.print(f"  ‚Ä¢ –ú–∞–∫—Å. –±–µ–≥—É–Ω–æ–≤: [green]{max_runners}[/green]")
            console.print(f"  ‚Ä¢ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: [green]{event_date}[/green]")
            console.print(f"  ‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º: {team_mode_text}")
            console.print()

            choice = questionary.select(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
                    "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º",
                    questionary.Separator(),
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
                use_shortcuts=True,
                qmark="",
                pointer="‚ñ∫"
            ).ask()

            if choice == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                break
            elif choice == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
                view_all_settings()
            elif choice == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É":
                edit_setting()
            elif choice == "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º":
                toggle_team_mode()

        except KeyboardInterrupt:
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞: {str(e)}[/red]\n")
            questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def waitlist_menu():
    """
    –ú–µ–Ω—é –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    """
    while True:
        try:
            clear_screen()
            console.print(Panel(
                "[bold cyan]üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è[/bold cyan]",
                border_style="blue"
            ))
            console.print()

            choice = questionary.select(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è",
                    "‚¨ÜÔ∏è –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
                    "‚¨áÔ∏è –í–µ—Ä–Ω—É—Ç—å –≤ waitlist",
                    "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é",
                    questionary.Separator(),
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
                use_shortcuts=True,
                qmark="",
                pointer="‚ñ∫"
            ).ask()

            if choice == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                break
            elif choice == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–µ—Å—å –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è":
                view_waitlist()
            elif choice == "‚¨ÜÔ∏è –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏":
                promote_from_waitlist()
            elif choice == "‚¨áÔ∏è –í–µ—Ä–Ω—É—Ç—å –≤ waitlist":
                demote_to_waitlist()
            elif choice == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é":
                check_waitlist_position()

        except KeyboardInterrupt:
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞: {str(e)}[/red]\n")
            questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def teams_menu():
    """
    –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
    """
    while True:
        try:
            clear_screen()
            console.print(Panel(
                "[bold cyan]üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏[/bold cyan]",
                border_style="blue"
            ))
            console.print()

            choice = questionary.select(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã",
                    "üîç –ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É",
                    "üèÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                    "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É",
                    questionary.Separator(),
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
                use_shortcuts=True,
                qmark="",
                pointer="‚ñ∫"
            ).ask()

            if choice == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                break
            elif choice == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã":
                view_all_teams()
            elif choice == "üîç –ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É":
                find_team()
            elif choice == "üèÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç":
                set_team_result()
            elif choice == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
                delete_team()

        except KeyboardInterrupt:
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞: {str(e)}[/red]\n")
            questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def stats_menu():
    """
    –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    while True:
        try:
            clear_screen()
            console.print(Panel(
                "[bold cyan]üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞[/bold cyan]",
                border_style="blue"
            ))
            console.print()

            choice = questionary.select(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                choices=[
                    "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    "üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç",
                    "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥",
                    questionary.Separator(),
                    "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
                ],
                use_shortcuts=True,
                qmark="",
                pointer="‚ñ∫"
            ).ask()

            if choice == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
                break
            elif choice == "üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                show_overview_stats()
            elif choice == "üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç":
                show_payment_stats()
            elif choice == "üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥":
                show_teams_stats()

        except KeyboardInterrupt:
            break
        except Exception as e:
            console.print(f"\n[red]–û—à–∏–±–∫–∞: {str(e)}[/red]\n")
            questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π

def view_all_participants():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    from cli_admin.database import get_all_participants
    from cli_admin.utils.display import display_participants_table

    participants = get_all_participants()
    console.print()
    display_participants_table(participants)
    console.print()
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def find_participant():
    """–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user_id = questionary.text("–í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞:").ask()

    if user_id:
        from cli_admin.database import get_participant_by_user_id
        from cli_admin.utils.display import display_participant_details, print_error

        try:
            participant = get_participant_by_user_id(int(user_id))
            if participant:
                display_participant_details(participant)
            else:
                print_error(f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except ValueError:
            print_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

        questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def mark_payment():
    """–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É"""
    user_id = questionary.text("–í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞:").ask()

    if user_id:
        from cli_admin.database import update_payment_status
        from cli_admin.utils.display import print_success, print_error

        try:
            success = update_payment_status(int(user_id), "paid")
            if success:
                print_success(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π")
            else:
                print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        except ValueError:
            print_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

        questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def assign_bib_number():
    """–ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä"""
    user_id = questionary.text("–í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞:").ask()
    if not user_id:
        return

    bib_number = questionary.text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä:").ask()
    if not bib_number:
        return

    from cli_admin.database import set_bib_number
    from cli_admin.utils.display import print_success, print_error

    try:
        success = set_bib_number(int(user_id), bib_number)
        if success:
            print_success(f"–ù–æ–º–µ—Ä {bib_number} –ø—Ä–∏—Å–≤–æ–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id}")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞")
    except ValueError:
        print_error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def edit_participant():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def delete_participant():
    """–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def view_all_settings():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from cli_admin.commands.settings import SETTINGS_KEYS
    from cli_admin.database import get_setting
    from cli_admin.utils.display import display_settings_table

    settings = {}
    for key in SETTINGS_KEYS:
        settings[key] = get_setting(key)

    console.print()
    display_settings_table(settings)
    console.print()
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def edit_setting():
    """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    from cli_admin.commands.settings import SETTINGS_KEYS

    key = questionary.select(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        choices=SETTINGS_KEYS
    ).ask()

    if key:
        value = questionary.text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{key}':").ask()

        if value:
            from cli_admin.database import set_setting
            from cli_admin.utils.display import print_success, print_error

            success = set_setting(key, value)
            if success:
                print_success(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{key}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ '{value}'")
            else:
                print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

            questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def toggle_team_mode():
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º"""
    from cli_admin.database import get_setting, set_setting
    from cli_admin.utils.display import print_success

    current = get_setting("team_mode_enabled")
    new_value = "0" if current == "1" or current == 1 else "1"

    set_setting("team_mode_enabled", new_value)
    status = "–≤–∫–ª—é—á–µ–Ω" if new_value == "1" else "–≤—ã–∫–ª—é—á–µ–Ω"
    print_success(f"–ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º {status}")

    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def view_waitlist():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è"""
    from cli_admin.database import get_waitlist_by_role
    from cli_admin.utils.display import display_waitlist_table

    waitlist = get_waitlist_by_role()
    console.print()
    display_waitlist_table(waitlist)
    console.print()
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def promote_from_waitlist():
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ waitlist –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏"""
    console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def demote_to_waitlist():
    """–í–µ—Ä–Ω—É—Ç—å –≤ waitlist"""
    console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def check_waitlist_position():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ waitlist"""
    console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def view_all_teams():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    from cli_admin.database import get_all_teams
    from cli_admin.utils.display import display_teams_table

    teams = get_all_teams()
    console.print()
    display_teams_table(teams)
    console.print()
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def find_team():
    """–ù–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É"""
    console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def set_team_result():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã"""
    console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def delete_team():
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"""
    console.print("[yellow]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ[/yellow]")
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def show_overview_stats():
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    from cli_admin.commands.stats import overview

    console.print()
    overview()
    console.print()
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def show_payment_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç"""
    from cli_admin.commands.stats import payment_stats

    console.print()
    payment_stats()
    console.print()
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()


def show_teams_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥"""
    from cli_admin.commands.stats import teams_stats

    console.print()
    teams_stats()
    console.print()
    questionary.press_any_key_to_continue("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...").ask()
