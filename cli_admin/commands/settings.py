"""
–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import typer
from rich.console import Console

from cli_admin.database import get_setting, set_setting
from cli_admin.utils.display import (
    display_settings_table,
    print_success,
    print_error,
    print_info,
)

app = typer.Typer(help="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
console = Console()


SETTINGS_KEYS = [
    "max_runners",
    "team_mode_enabled",
    "registration_end_date",
    "event_date",
    "participation_fee",
    "event_location",
    "auto_backup_enabled",
]


@app.command("list")
def list_settings():
    """
    üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    try:
        settings = {}

        for key in SETTINGS_KEYS:
            value = get_setting(key)
            settings[key] = value

        display_settings_table(settings)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
        raise typer.Exit(1)


@app.command("get")
def get(key: str = typer.Argument(..., help="–ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")):
    """
    üîç –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    try:
        value = get_setting(key)

        if value is None:
            print_error(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise typer.Exit(1)

        print_info(f"{key} = {value}")

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("set")
def set_value(
    key: str = typer.Argument(..., help="–ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
    value: str = typer.Argument(..., help="–ó–Ω–∞—á–µ–Ω–∏–µ"),
):
    """
    ‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    """
    try:
        success = set_setting(key, value)

        if success:
            print_success(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{key}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ '{value}'")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("toggle")
def toggle(key: str = typer.Argument(..., help="–ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")):
    """
    üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –±—É–ª–µ–≤—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É (0 <-> 1)
    """
    try:
        current = get_setting(key)

        if current is None:
            print_error(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise typer.Exit(1)

        # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
        try:
            current_int = int(current)
            new_value = 0 if current_int == 1 else 1
        except ValueError:
            print_error(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{key}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–ª–µ–≤–æ–π")
            raise typer.Exit(1)

        success = set_setting(key, str(new_value))

        if success:
            status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value == 1 else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
            print_success(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{key}' {status}")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)
