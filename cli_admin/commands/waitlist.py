"""
–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è
"""

import typer
from typing import Optional

from cli_admin.database import (
    get_waitlist_by_role,
    promote_waitlist_user_by_id,
    demote_participant_to_waitlist,
    remove_from_waitlist,
    get_waitlist_position,
)
from cli_admin.utils.display import (
    display_waitlist_table,
    print_success,
    print_error,
    print_info,
    confirm_action,
)

app = typer.Typer(help="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è")


@app.command("list")
def list_waitlist(
    role: Optional[str] = typer.Option(None, "--role", "-r", help="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ (runner/volunteer)"),
):
    """
    üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    """
    try:
        waitlist = get_waitlist_by_role(role)

        if not waitlist:
            print_info("–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Å—Ç")
            return

        display_waitlist_table(waitlist)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è: {str(e)}")
        raise typer.Exit(1)


@app.command("promote")
def promote(user_id: int = typer.Argument(..., help="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ waitlist")):
    """
    ‚¨ÜÔ∏è –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ waitlist –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    """
    try:
        result = promote_waitlist_user_by_id(user_id)

        if result.get("success"):
            print_success(result.get("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏"))
        else:
            print_error(result.get("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ"))
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("demote")
def demote(user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞")):
    """
    ‚¨áÔ∏è –í–µ—Ä–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ waitlist
    """
    try:
        result = demote_participant_to_waitlist(user_id)

        if result.get("success"):
            print_success(result.get("message", "–£—á–∞—Å—Ç–Ω–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ waitlist"))
        else:
            print_error(result.get("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ"))
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("remove")
def remove(
    user_id: int = typer.Argument(..., help="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    force: bool = typer.Option(False, "--force", "-f", help="–ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"),
):
    """
    ‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
    """
    try:
        if not force:
            if not confirm_action(f"–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è?"):
                print_info("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return

        success = remove_from_waitlist(user_id)

        if success:
            print_success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("position")
def check_position(user_id: int = typer.Argument(..., help="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")):
    """
    üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
    """
    try:
        position, total = get_waitlist_position(user_id)

        if position is None:
            print_error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è")
            raise typer.Exit(1)

        print_info(f"–ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {position} –∏–∑ {total}")

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)
