"""
–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
"""

import typer
from typing import Optional
from rich.console import Console

from cli_admin.database import (
    get_all_participants,
    get_participant_by_user_id,
    get_participants_by_role,
    update_payment_status,
    set_bib_number,
    delete_participant,
    update_participant_field,
    set_participant_category,
    set_participant_cluster,
    clear_all_categories,
    clear_all_clusters,
)
from cli_admin.utils.display import (
    display_participants_table,
    display_participant_details,
    print_success,
    print_error,
    print_warning,
    confirm_action,
)
from cli_admin.utils.validators import (
    validate_telegram_id,
    validate_bib_number,
    validate_payment_status,
)

app = typer.Typer(help="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
console = Console()


@app.command("list")
def list_participants(
    role: Optional[str] = typer.Option(None, "--role", "-r", help="–§–∏–ª—å—Ç—Ä –ø–æ —Ä–æ–ª–∏ (runner/volunteer)"),
    paid: Optional[bool] = typer.Option(None, "--paid", "-p", help="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç—ã"),
    limit: int = typer.Option(100, "--limit", "-l", help="–õ–∏–º–∏—Ç –≤—ã–≤–æ–¥–∞"),
    offset: int = typer.Option(0, "--offset", "-o", help="–°–º–µ—â–µ–Ω–∏–µ"),
):
    """
    üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if role:
            participants = get_participants_by_role(role)
        else:
            participants = get_all_participants()

        if not participants:
            print_warning("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ
        if paid is not None:
            status = 'paid' if paid else 'pending'
            participants = [p for p in participants if p[6] == status]

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        participants = participants[offset:offset+limit]

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
        display_participants_table(participants)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
        raise typer.Exit(1)


@app.command("get")
def get_participant(
    user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞")
):
    """
    üîç –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid, parsed_id, error = validate_telegram_id(str(user_id))
        if not is_valid:
            print_error(error)
            raise typer.Exit(1)

        # –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = get_participant_by_user_id(parsed_id)

        if not participant:
            print_error(f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {parsed_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise typer.Exit(1)

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏
        display_participant_details(participant)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("mark-paid")
def mark_paid(
    user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
    force: bool = typer.Option(False, "--force", "-f", help="–ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"),
):
    """
    üí≥ –û—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        participant = get_participant_by_user_id(user_id)
        if not participant:
            print_error(f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise typer.Exit(1)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not force:
            if not confirm_action(f"–û—Ç–º–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {participant[2]} (ID: {user_id}) –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ?"):
                print_warning("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        success = update_payment_status(user_id, "paid")

        if success:
            print_success(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏–π")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("set-payment")
def set_payment_status(
    user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
    status: str = typer.Argument(..., help="–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã (paid/pending/unpaid)"),
):
    """
    üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        is_valid, error = validate_payment_status(status)
        if not is_valid:
            print_error(error)
            raise typer.Exit(1)

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        success = update_payment_status(user_id, status)

        if success:
            print_success(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("set-bib")
def set_bib(
    user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
    number: str = typer.Argument(..., help="–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä"),
):
    """
    üî¢ –ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–æ–º–µ—Ä
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
        is_valid, error = validate_bib_number(number)
        if not is_valid:
            print_error(error)
            raise typer.Exit(1)

        # –ü—Ä–∏—Å–≤–æ–∏—Ç—å –Ω–æ–º–µ—Ä
        success = set_bib_number(user_id, number)

        if success:
            print_success(f"–ù–æ–º–µ—Ä {number} –ø—Ä–∏—Å–≤–æ–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id}")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("edit")
def edit_participant(
    user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
    field: str = typer.Option(..., "--field", "-f", help="–ü–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
    value: str = typer.Option(..., "--value", "-v", help="–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"),
):
    """
    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    """
    try:
        # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ
        success = update_participant_field(user_id, field, value)

        if success:
            print_success(f"–ü–æ–ª–µ '{field}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{value}'")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("delete")
def delete(
    user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
    force: bool = typer.Option(False, "--force", "-f", help="–£–¥–∞–ª–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"),
):
    """
    ‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = get_participant_by_user_id(user_id)
        if not participant:
            print_error(f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise typer.Exit(1)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not force:
            console.print(f"\n[yellow]‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞![/yellow]")
            console.print(f"  –£—á–∞—Å—Ç–Ω–∏–∫: {participant[2]} (ID: {user_id})")
            console.print(f"  –†–æ–ª—å: {'–ë–µ–≥—É–Ω' if participant[4] == 'runner' else '–í–æ–ª–æ–Ω—Ç–µ—Ä'}")
            console.print(f"  –û–ø–ª–∞—Ç–∞: {'–û–ø–ª–∞—á–µ–Ω–æ' if participant[6] == 'paid' else '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}\n")

            if not confirm_action("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞?"):
                print_warning("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return

        # –£–¥–∞–ª–∏—Ç—å
        success = delete_participant(user_id)

        if success:
            print_success(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user_id} —É–¥–∞–ª–µ–Ω")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("set-category")
def set_category(
    user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
    category: str = typer.Argument(..., help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
):
    """
    üè∑Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
    """
    try:
        success = set_participant_category(user_id, category)

        if success:
            print_success(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("set-cluster")
def set_cluster(
    user_id: int = typer.Argument(..., help="Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
    cluster: str = typer.Argument(..., help="–ö–ª–∞—Å—Ç–µ—Ä"),
):
    """
    üìç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞
    """
    try:
        success = set_participant_cluster(user_id, cluster)

        if success:
            print_success(f"–ö–ª–∞—Å—Ç–µ—Ä '{cluster}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–∞")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("clear-categories")
def clear_categories(
    confirm: bool = typer.Option(False, "--confirm", help="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É"),
):
    """
    üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    try:
        if not confirm:
            if not confirm_action("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?"):
                print_warning("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return

        success = clear_all_categories()

        if success:
            print_success("–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—á–∏—â–µ–Ω—ã")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("clear-clusters")
def clear_clusters(
    confirm: bool = typer.Option(False, "--confirm", help="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É"),
):
    """
    üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã
    """
    try:
        if not confirm:
            if not confirm_action("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã?"):
                print_warning("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return

        success = clear_all_clusters()

        if success:
            print_success("–í—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("search")
def search_participants(
    query: str = typer.Argument(..., help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è –∏–ª–∏ username)"),
):
    """
    üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ username
    """
    try:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = get_all_participants()

        if not participants:
            print_warning("–£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
        query_lower = query.lower()
        filtered = [
            p for p in participants
            if (p[2] and query_lower in p[2].lower()) or  # –ò–º—è
               (p[1] and query_lower in p[1].lower())     # Username
        ]

        if not filtered:
            print_warning(f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        display_participants_table(filtered, title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'")

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        raise typer.Exit(1)
