"""
–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏
"""

import typer

from cli_admin.database import (
    get_all_teams,
    get_team_by_id,
    delete_team,
    set_team_result,
    count_complete_teams,
    clear_all_teams,
)
from cli_admin.utils.display import (
    display_teams_table,
    print_success,
    print_error,
    print_info,
    confirm_action,
)

app = typer.Typer(help="üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏")


@app.command("list")
def list_teams():
    """
    üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    """
    try:
        teams = get_all_teams()

        if not teams:
            print_info("–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        display_teams_table(teams)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        complete = count_complete_teams()
        print_info(f"–ü–æ–ª–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {complete}/{len(teams)}")

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")
        raise typer.Exit(1)


@app.command("get")
def get_team(team_id: int = typer.Argument(..., help="ID –∫–æ–º–∞–Ω–¥—ã")):
    """
    üîç –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    """
    try:
        team = get_team_by_id(team_id)

        if not team:
            print_error(f"–ö–æ–º–∞–Ω–¥–∞ —Å ID {team_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise typer.Exit(1)

        # teams table: team_id, team_name, member1_id, member2_id, result, created_date
        team_id, team_name, member1_id, member2_id, result, created_date, *_ = team

        print_info(f"\n–ö–æ–º–∞–Ω–¥–∞ ID: {team_id}")
        print_info(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {team_name}")
        print_info(f"–£—á–∞—Å—Ç–Ω–∏–∫ 1: {member1_id or '-'}")
        print_info(f"–£—á–∞—Å—Ç–Ω–∏–∫ 2: {member2_id or '-'}")
        print_info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result or '-'}")
        print_info(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_date or '-'}\n")

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("set-result")
def set_result(
    team_id: int = typer.Argument(..., help="ID –∫–æ–º–∞–Ω–¥—ã"),
    result: str = typer.Argument(..., help="–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã"),
):
    """
    üèÅ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    """
    try:
        success = set_team_result(team_id, result)

        if success:
            print_success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã {team_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result}")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("delete")
def delete(
    team_id: int = typer.Argument(..., help="ID –∫–æ–º–∞–Ω–¥—ã"),
    force: bool = typer.Option(False, "--force", "-f", help="–ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"),
):
    """
    ‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
    """
    try:
        if not force:
            if not confirm_action(f"–£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É {team_id}?"):
                print_info("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return

        success = delete_team(team_id)

        if success:
            print_success(f"–ö–æ–º–∞–Ω–¥–∞ {team_id} —É–¥–∞–ª–µ–Ω–∞")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)


@app.command("clear-all")
def clear_all(confirm: bool = typer.Option(False, "--confirm", help="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—á–∏—Å—Ç–∫—É")):
    """
    üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    """
    try:
        if not confirm:
            if not confirm_action("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–æ–º–∞–Ω–¥—ã?"):
                print_info("–û—Ç–º–µ–Ω–µ–Ω–æ")
                return

        success = clear_all_teams()

        if success:
            print_success("–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω—ã")
        else:
            print_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–º–∞–Ω–¥")
            raise typer.Exit(1)

    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞: {str(e)}")
        raise typer.Exit(1)
